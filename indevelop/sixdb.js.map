{"version":3,"file":"sixdb.js","sources":["../src/qrySys.js","../src/taskQueue.js","../src/logger.js","../src/sixdbStore.js","../src/sixdbIndex.js","../src/errorSys.js","../src/sixdb.js","../src/helpers.js","../src/index.js"],"sourcesContent":["export const _qrySys = {\n  init() {\n    this.blockRgx = /\\(.*?(?=\\))/g;\n    this.blockOperatorRgx = /[\\&\\|]+(?=(\\s*\\())/g;\n    this.operatorRgx = /(=|>|<|>=|<=|!=|<>|\\^|\\$|~~)+/g;\n    this.rightOperandRgx = /(?:([=><\\^\\$~]))\\s*[\"']?[^\"']+[\"']?\\s*(?=[&\\|])|(?:[=><\\^\\$~])\\s*[\"']?[^\"']+[\"']?(?=$)/g;\n    this.leftOperandRgx = /([^\"'\\s])(\\w+)(?=\\s*[=|>|<|!|\\^|\\$~])/g;\n  },\n\n  makeConditionsBlocksArray(query) {\n    let t = this;\n    let conditionsBlocksArray = [];\n\n    //// Gets blocks\n    //\n    let blocks = query.match(t.blockRgx);\n\n    // Logical operators between blocks, all must be the same type\n    let extLogOperator = query.match(t.blockOperatorRgx)\n      ? query.match(t.blockOperatorRgx)\n      : null;\n\n    // If condition is a single sentence like: \" a = 10 & b > 5 \"\n    if (!blocks) {\n      t.pushConditionBlockToArray(query, null, conditionsBlocksArray);\n      return conditionsBlocksArray;\n    }\n\n    // Delete left parentheses\n    t.deleteLeftParentheses(blocks);\n\n    // If condition is a multiple sentence like: \" (a = 5 & b = 10) || (c < 4 & f > 10) \"\n    if (extLogOperator) {\n      if (extLogOperator == '&' || extLogOperator == '&&') {\n        extLogOperator = 'and';\n      } else {\n        extLogOperator = 'or';\n      }\n    }\n\n    for (let i = 0; i < blocks.length; i++) {\n      t.pushConditionBlockToArray(blocks[i], extLogOperator, conditionsBlocksArray);\n    }\n    return conditionsBlocksArray;\n  },\n\n  deleteLeftParentheses(blocks) {\n    let size = blocks.length;\n    for (let i = 0; i < size; i++) {\n      blocks[i] = blocks[i].substr(1);\n    }\n  },\n\n  pushConditionBlockToArray(query, extLogOperator, conditionsBlocksArray) {\n    let t = this;\n    let leftOperands = query.match(t.leftOperandRgx);\n    let rightOperands = query.match(t.rightOperandRgx);\n\n    for (let i = 0; i < rightOperands.length; i++) {\n      // Delete the operator\n      while (rightOperands[i][0].match(/[=><!\\^\\$~]/g)) {\n        rightOperands[i] = rightOperands[i].substr(1);\n      }\n      // Delete quotes and trim white spaces\n      rightOperands[i] = rightOperands[i].replace(/[\"']/g, '').trim();\n    }\n\n    //// Gets operators\n    //// Removing righ operands (values) before extract comparison operators avoids\n    //// problems with literal values that include comparisson symbols(= , >,...) quoted.\n    //\n    for (let i = 0; i < rightOperands.length; i++) {\n      query = query.replace(rightOperands[i], '');\n    }\n    let operators = query.match(t.operatorRgx);\n\n    let conditionsArray = [];\n\n    // If query is like: \" c = 15 \"\n    if (leftOperands.length == 1) {\n      //{property, operator (=,>,<, ...), value}\n      conditionsArray.push({\n        keyPath: leftOperands[0],\n        cond: operators[0],\n        value: rightOperands[0]\n      });\n\n      conditionsBlocksArray.push({\n        conditionsArray: conditionsArray,\n        internalLogOperator: null,\n        externalLogOperator: extLogOperator\n      });\n\n      conditionsArray = null;\n    } else {\n      // if query is like: \" c = 15 & a > 30 \"\n      let logOperatorsType = query.match(/[\\&\\|]+/g)[0];\n\n      if (logOperatorsType == '&' || logOperatorsType == '&&') {\n        logOperatorsType = 'and';\n      } else {\n        logOperatorsType = 'or';\n      }\n\n      for (let i = 0; i < operators.length; i++) {\n        conditionsArray.push({\n          keyPath: leftOperands[i],\n          cond: operators[i],\n          value: rightOperands[i]\n        });\n      }\n\n      conditionsBlocksArray.push({\n        conditionsArray: conditionsArray,\n        internalLogOperator: logOperatorsType,\n        externalLogOperator: extLogOperator\n      });\n      conditionsArray = null;\n    } // end if else\n  },\n\n  testConditionBlock(cursor, conditionsArray, operator) {\n    let t = this;\n\n    let test = operator == 'and' || !operator ? true : false;\n    for (let i = 0; i < conditionsArray.length; i++) {\n      test = t.testCondition(\n        cursor.value[conditionsArray[i].keyPath],\n        conditionsArray[i].cond,\n        conditionsArray[i].value\n      );\n      if ((operator == 'and' || !operator) && !test) return false;\n      else if (operator == 'or' && test) return true;\n    }\n\n    return test;\n  },\n\n  testCondition(value1, condition, value2) {\n    let result;\n    switch (condition) {\n      case '=':\n        result = value1 == value2 ? true : false;\n        break;\n\n      case '>':\n        result = value1 > value2 ? true : false;\n        break;\n\n      case '<':\n        result = value1 < value2 ? true : false;\n        break;\n\n      case '>=':\n        result = value1 >= value2 ? true : false;\n        break;\n\n      case '<=':\n        result = value1 <= value2 ? true : false;\n        break;\n\n      case '!=':\n        result = value1 != value2 ? true : false;\n        break;\n\n      case '<>': // string value1 contains substring value2\n        if (typeof value1 != 'string') {\n          return false;\n        }\n        result = value1.indexOf(value2) != -1;\n        break;\n\n      case '^':\n        if (typeof value1 != 'string') {\n          return false;\n        }\n        result = value1.indexOf(value2) == 0;\n        break;\n\n      case '$':\n        if (typeof value1 != 'string') {\n          return false;\n        }\n        result = value1.indexOf(value2) == value1.length - value2.length;\n        break;\n\n      case '~~': //custom operator\n        try {\n          result = customOperator(value1, value2);\n        } catch (e) {\n          result = false;\n        }\n        break;\n\n      default:\n        break;\n    }\n    return result;\n  }\n};\n","import { logEnum, logger } from './index.js';\n\nlet idle = true;\nexport let tasks = [];\n\nexport function checkTasks() {\n  if (tasks.length == 0) {\n    idle = true;\n    logger('No pending tasks');\n    return;\n  }\n  idle = false;\n  let task = tasks[0];\n  if (!task.type) {\n    task.fn.apply(this, task.args);\n  } else {\n    logger('Custom task' + logEnum.begin);\n    task.fn.apply(task.context, task.args);\n    done();\n  }\n}\n\nexport function done() {\n  tasks.shift();\n  checkTasks();\n}\n\nexport function execTasks() {\n  if (idle) {\n    checkTasks();\n  }\n}\n","export const logEnum = {\n  begin: '//--------------------------------------->'\n};\n\nexport function logger(message, isError) {\n  if (consoleOff && !isError) return;\n\n  if (!isError) console.log(message);\n  else console.error(message);\n}\n","import {\n  _qrySys,\n  aggregateLog,\n  checkTasks,\n  countLog,\n  cursorAggregate,\n  cursorCount,\n  cursorDelRecords,\n  cursorGetRecords,\n  cursorLoop,\n  cursorUpdate,\n  db,\n  dbName,\n  done,\n  Index,\n  initCursorLoop,\n  isKey,\n  lastErrorObj,\n  logEnum,\n  logger,\n  makeErrorObject,\n  queryLog,\n  requestErrorAction,\n  requestSuccessAction,\n  setDb,\n  setSharedObj,\n  tasks,\n  tkOpen,\n  tryGetAll,\n  tryGetByKey,\n  tryOpenCursor,\n  voidFn,\n} from './index.js';\n\n//// Private variables //////////////////////////////\nlet _store;\nconst qrySys = _qrySys;\n\nfunction setStore(storeName, rwMode) {\n  _store = null;\n  let origin = 'initStore()';\n  try {\n    _store = db.transaction(storeName, rwMode).objectStore(storeName);\n  } catch (e) {\n    makeErrorObject(origin, e);\n    logger(lastErrorObj, true);\n  }\n  done();\n}\n\n// Puts setStore() in task queue\nfunction initStore(storeName, rwMode) {\n  let args = [storeName, rwMode];\n  let task = {\n    args: args,\n    fn: setStore\n  };\n\n  tasks.push(task);\n}\n\n//// Private functions //////////////////////////////\n\n// Creates a new index in the store\nfunction newIndex(\n  storeName,\n  indexName,\n  keyPath,\n  { unique, successCallback, errorCallback } = {}\n) {\n  let version;\n  let origin = 'Store.newIndex()';\n  logger(origin + logEnum.begin);\n\n  //checks if index exists\n  let transaction = db.transaction(storeName);\n  if (transaction.objectStore(storeName).indexNames.contains(indexName)) {\n    console.log('activated');\n    requestSuccessAction(\n      null,\n      origin,\n      successCallback,\n      `The index \"${indexName}\" already exists in store \"${storeName}\"`\n    );\n    return;\n  }\n\n  //// Gets the new version\n  //\n  version = db.version;\n  db.close();\n  let newVersion = version + 1;\n\n  //// The change of the database schema only can be performed in the onupgradedneeded event\n  //// so a new version number is needed to trigger that event.\n  //\n  let request = window.indexedDB.open(dbName, newVersion);\n\n  request.onupgradeneeded = function (event) {\n    let _db = event.target.result;\n    setDb(_db);\n    let _store = null;\n\n    var upgradeTransaction = event.target.transaction;\n\n    //// Gets store\n    try {\n      _store = upgradeTransaction.objectStore(storeName);\n      _store.createIndex(indexName, keyPath);\n    } catch (e) {\n      requestErrorAction(origin, e, errorCallback);\n      return;\n    }\n  };\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `Index \"${indexName}\" created in store \"${storeName}\"`\n    );\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Adds one(A) or more(B) records to the store\nfunction addRecord(obj, { successCallback, errorCallback }) {\n  let origin = 'Store.add()';\n  logger(origin + logEnum.begin);\n  let args = { obj, origin, successCallback, errorCallback };\n\n  if (Array.isArray(obj)) {\n    addRecordA(args);\n  } else {\n    addRecordB(args);\n  }\n}\nfunction addRecordA({ obj, origin, successCallback, errorCallback }) {\n  let objSize = obj.length;\n  let counter = 0;\n\n  while (counter < objSize) {\n    let request = _store.add(obj[counter]);\n    counter++;\n    request.onerror = function () {\n      requestErrorAction(origin, request.error, errorCallback);\n    };\n  }\n  requestSuccessAction(\n    event,\n    origin,\n    successCallback,\n    `New record/s added to store \"${_store.name}\"`\n  );\n}\nfunction addRecordB({ obj, origin, successCallback, errorCallback }) {\n  let request = _store.add(obj);\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `New record/s added to store \"${_store.name}\"`\n    );\n  };\n\n  request.onerror = function (event) {\n    requestErrorAction(origin, event.target.error, errorCallback);\n  };\n}\n// Gets all records from a store\nfunction getAll(successCallback, errorCallback) {\n  let request = null;\n  let origin = 'Store.getAll()';\n  logger(origin + logEnum.begin);\n\n  /// Callbacks of request\n  let onsuccess = function (event) {\n    requestSuccessAction(\n      event.target.result,\n      origin,\n      successCallback,\n      `All records returned from store \"${_store.name}\"`\n    );\n  };\n  let onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n\n  /// Request definition\n  request = tryGetAll(origin, _store, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = onsuccess;\n  request.onerror = onerror;\n}\n// Gets records filtered by a query\nfunction get(query, successCallback, errorCallback) {\n  let origin = 'Store.get()';\n  logger(origin + logEnum.begin);\n  if (isKey(query)) {\n    getBykey(query, successCallback, errorCallback);\n    return;\n  }\n  let resultFiltered = [];\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  let obj = {\n    counter: 0,\n    source: _store.name,\n    extMode: extMode,\n    event: resultFiltered,\n    resultFiltered: resultFiltered,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: queryLog,\n    cursorFunction: cursorGetRecords,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  let request = tryOpenCursor(origin, _store, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Gets records with key as query\nfunction getBykey(query, successCallback, errorCallback) {\n  let origin = 'Store.getByKey()';\n  logger(origin + logEnum.begin);\n  let request;\n\n  let onsuccess = function (event) {\n    successCallback(event.target.result, origin, query);\n    db.close();\n    logger(`Records with key \"${query}\" returned from store \"${_store.name}\"`);\n    done();\n  };\n  let onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n\n  request = tryGetByKey(origin, _store, query, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = onsuccess;\n  request.onerror = onerror;\n}\n// Deletes one or more records using a query\nfunction del(query, successCallback, errorCallback) {\n  let origin = 'Store.del()';\n  logger(origin + logEnum.begin);\n\n  if (isKey(query)) {\n    delByKey(query, successCallback, errorCallback);\n    return;\n  }\n\n  let request = null;\n\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n\n  let obj = {\n    counter: 0,\n    extMode: extMode,\n    source: _store.name,\n    event: event,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: queryLog,\n    cursorFunction: cursorDelRecords,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  request = tryOpenCursor(origin, _store, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Deletes records using primary key as query. Is more fast.\nfunction delByKey(query, successCallback, errorCallback) {\n  let origin = 'Store.delByKey()';\n  logger(origin + logEnum.begin);\n\n  let request = _store.delete(query);\n\n  request.onsuccess = function (event) {\n    successCallback(event, origin, query);\n    db.close();\n    logger(`Records with primary key \"${query}\" deleted from store \"${_store.name}\"`);\n    done();\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Counts records filtered by a query\nfunction count(query, successCallback, errorCallback) {\n  let origin = 'Store.count()';\n  logger(origin + logEnum.begin);\n\n  if (!query) {\n    countAll(successCallback, errorCallback);\n    return;\n  }\n\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  /// Object used by cursorLoop()\n  let obj = {\n    counter: 0,\n    get event() {\n      return this.counter;\n    },\n    source: _store.name,\n    extMode: extMode,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: countLog,\n    cursorFunction: cursorCount,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  initCursorLoop(_store, errorCallback);\n}\n// Counts all records in the store\nfunction countAll(successCallback, errorCallback) {\n  let origin = 'Store.countAll()';\n  logger(origin + logEnum.begin);\n  let request = _store.count();\n\n  request.onsuccess = function (event) {\n    let message = `${event.target.result} records in store \"${_store.name}\"`;\n    requestSuccessAction(event.target.result, origin, successCallback, message);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\nfunction checkIndex(indexName, callback) {\n  let origin = 'Store.checkIndex()';\n  logger(origin + logEnum.begin);\n  let exists = _store.indexNames.contains(indexName);\n  let message = `Index \"${indexName}\" check result -> ${exists}`;\n  db.close();\n  callback(exists, origin);\n  logger(message);\n  done();\n}\n\n// Deletes an index\nfunction delIndex(storeName, indexName, successCallback, errorCallback) {\n  let version;\n  let origin = 'Store.delIndex()';\n  logger(origin + logEnum.begin);\n\n  //// Gets the new version\n  //\n  version = db.version;\n  db.close();\n  let newVersion = version + 1;\n\n  //// The change of the database schema only can be performed in the onupgradedneeded event\n  //// so a new version number is needed to trigger that event.\n  //\n  let request = window.indexedDB.open(dbName, newVersion);\n\n  request.onupgradeneeded = function (event) {\n    let _db = event.target.result;\n    setDb(_db);\n    let _store = null;\n\n    let upgradeTransaction = event.target.transaction;\n\n    //// Gets store\n    try {\n      _store = upgradeTransaction.objectStore(storeName);\n    } catch (e) {\n      requestErrorAction(origin, e, errorCallback);\n      return;\n    }\n\n    _store.deleteIndex(indexName);\n  };\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `Index \"${indexName}\" deleted from object store \"${storeName}\"`\n    );\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Apply a function (aggregatefn) to the values of a property.\nfunction getaggregateFunction(\n  property,\n  aggregatefn,\n  successCallback = voidFn,\n  origin,\n  { query, errorCallback = voidFn }\n) {\n  logger(origin + logEnum.begin);\n\n  var commonArgs = {\n    origin: origin,\n    property: property,\n    aggregatefn: aggregatefn,\n    successCallback: successCallback,\n    errorCallback: errorCallback\n  };\n\n  if (!query) getaggregateFunctionA(commonArgs);\n  else getAggregateFunctionB(query, commonArgs);\n}\nfunction getaggregateFunctionA({\n  origin,\n  property,\n  aggregatefn,\n  successCallback,\n  errorCallback\n}) {\n  let actualValue = null;\n  let counter = 0;\n\n  let request = tryOpenCursor(origin, _store, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n\n    if (cursor) {\n      if (cursor.value[property]) {\n        counter++;\n        actualValue = aggregatefn(actualValue, cursor.value[property], counter);\n      }\n      cursor.continue();\n    } else {\n      successCallback(actualValue, origin);\n      db.close();\n      logger(`Result of ${origin} on property \"${property}\": ${actualValue}`);\n      done();\n    }\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\nfunction getAggregateFunctionB(\n  query,\n  { origin, property, aggregatefn, successCallback, errorCallback }\n) {\n  if (isKey(query)) {\n    query = _store.keyPath + '=' + query;\n  }\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  let obj = {\n    counter: 0,\n    actualValue: null,\n    get event() {\n      return this.actualValue;\n    },\n    property: property,\n    aggregatefn: aggregatefn,\n    extMode: extMode,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: aggregateLog,\n    cursorFunction: cursorAggregate,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  /// request definition\n  let request = tryOpenCursor(origin, _store, errorCallback); //store.openCursor();\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Adds getaggregateFunction() to the task queue\nfunction makeAggregateTask({\n  property,\n  successCallback,\n  aggregatefn,\n  origin,\n  query,\n  errorCallback\n}) {\n  let options = {\n    query: query,\n    errorCallback: errorCallback\n  };\n\n  let args = [property, aggregatefn, successCallback, origin, options];\n\n  tasks.push({ args: args, fn: getaggregateFunction });\n}\n// Updates one or more records\nfunction update(query, objectValues, { successCallback, errorCallback }) {\n  let origin = 'Store.update()';\n  logger(origin + logEnum.begin);\n\n  //// Gets isIndexKeyValue\n  //// If true then is query is a single value (an index key)\n  let isIndexKeyValue = isKey(query);\n\n  if (isIndexKeyValue) {\n    // If query is a single number value then is mofied to be valid to the query system\n    query = _store.keyPath + '=' + query;\n  }\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n\n  var extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  var exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n\n  let obj = {\n    counter: 0,\n    keys: Object.keys(objectValues),\n    newObjectValuesSize: Object.keys(objectValues).length,\n    extMode: extMode,\n    source: _store.name,\n    objectValues: objectValues,\n    event: event,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: queryLog,\n    cursorFunction: cursorUpdate,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  initCursorLoop(_store, errorCallback);\n}\n\nfunction clear({ successCallback, errorCallback }) {\n  let origin = 'Store.clear()';\n  logger(origin + logEnum.begin);\n\n  let request = null;\n  try {\n    request = _store.clear();\n  } catch (e) {\n    requestErrorAction(origin, request.error, errorCallback);\n    return;\n  }\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event.target.result,\n      origin,\n      successCallback,\n      `Store \"${_store.name}\" cleared.`\n    );\n  };\n\n  request.onerror = function (event) {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\nfunction initTasks(storeName, rwMode, task) {\n  tasks.push(tkOpen);\n  initStore(storeName, rwMode);\n  tasks.push(task);\n}\n\n/**\n * Constructs a Sixdb Store instance. This constructor is used via Sixdb.openStore() method.\n * @class\n * @param  {string} storeName Name of the object store\n * @return {object}\n */\nexport let Store = function (storeName) {\n  //// Private properties ////////////////////////////\n  let _storeName = storeName;\n\n  /**\n * Gets the name of the store.\n * @method Store#name\n * @return  {string} Name of the store.\n */\n  this.name = function () {\n    return _storeName;\n  };\n\n  //// Public Methods///////////////////\n  /*\n  this.newIndex;\n  this.openIndex;\n  this.delIndex;\n  this.add;\n  this.getAll;\n  this.get;\n  this.del;\n  this.count;\n  this.aggregateFn;\n  this.update;\n  this.clear;\n  */\n};\n\n/**\n * Creates a new index in the object store.\n * @method Store#newIndex\n * @instance\n * @param  {string} indexName Name of the new index.\n * @param  {string} keyPath Name of the property used as key.\n * @param  {object} [options]\n * @param  {boolean} [options.unique] If true, the index will not allow duplicate values for a single key.\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nStore.prototype.newIndex = function (\n  indexName,\n  keyPath,\n  { unique, successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let args = [\n    this.name(),\n    indexName,\n    keyPath,\n    {\n      unique: unique,\n      successCallback: successCallback,\n      errorCallback: errorCallback\n    }\n  ];\n  let task = {\n    args: args,\n    fn: newIndex\n  };\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\nStore.prototype.openIndex = function (indexName) {\n  return new Index(this.name(), indexName);\n};\n\n/**\n * Adds one or more records to the object store.\n * @method Store#add\n * @instance\n * @param  {object | object[]} obj A single object or an array of objects wich represents the records.\n * @param  {object} [options]\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * var mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * var store = mydb.openStore('southFactory');\n *\n * // Object to insert in the object store\n * //\n * var person = {\n *     name: 'Peter',\n *     age: 32\n * }\n *\n * // Callback function to process a possible error\n * //\n * var myErrorCallback = function(e){\n *     console.log(e);\n * }\n *\n *\n * //\n * // Inserts a new record in the object store.\n * //\n * store.add( person, { errorCallback: myErrorCallback });\n *\n *\n * // Execs all pending tasks.\n * //\n * mydb.execTasks();\n */\nStore.prototype.add = function (obj, { successCallback = voidFn, errorCallback = voidFn } = {}) {\n  let args = [obj, { successCallback, errorCallback }];\n  let task = { args: args, fn: addRecord };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n\n/**\n * Gets all records from the object store.\n * @method Store#checkIndex\n * @instance\n * @param {string} indexName Name of the index \n * @param  {function} callback Receives a boolean (true if index exists in the store) and origin as parameters. \n * @param  {function} [errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * myStore.checkIndex('Names', (exists) => {\n *  if(exists){\n *   console.log('Index Names exists in this store')\n *  }\n * });\n */\nStore.prototype.checkIndex = function (indexName, callback = voidFn) {\n  let args = [indexName, callback];\n  let task = { args: args, fn: checkIndex };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n\n/**\n * Gets all records from the object store.\n * @method Store#getAll\n * @instance\n * @param  {function} successCallback Function called on success. Receives event and origin as parameters.\n * @param  {function} [errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n *\n *\n * //\n * // Callback function to process the result\n * //\n * const myCallback = function(result){\n *\n *     if(Array.isArray(result)){\n *         for(let i = 0, j = result.length; i < j; i++)\n *         console.log(`Name: ${result[i].name} Age: ${result[i].age} Salary: ${result[i].salary}\\n`);\n *     } else {\n *         console.log(`Name: ${result.name} Age: ${result.age} Salary:{result.salary}`);\n *     }\n * };\n *\n *\n * //\n * // Gets all records from the store \"southFactory\"\n * //\n * store.getAll(myCallback);\n *  \n *\n *\n * // Execs all pending tasks\n * mydb.execTasks();\n*/\nStore.prototype.getAll = function (successCallback = voidFn, errorCallback = voidFn) {\n  let args = [successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: getAll\n  };\n\n  initTasks(this.name(), 'readonly', task);\n};\n\n/**\n * Gets one or more records from store using a query.\n * @method Store#get\n * @instance\n * @param  {query} query The query to select the records.\n * @param  {function} successCallback Function called on success. Receives event and origin as parameters.\n * @param  {function} [errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Gets all records with salary > 1200 and age < 40\n * //\n * store.get('salary > 1200 & age < 40', mySuccesCallback);\n * \n * mydb.execTasks();\n * \n */\nStore.prototype.get = function (query, successCallback = voidFn, errorCallback = voidFn) {\n  let args = [query, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: get\n  };\n\n  initTasks(this.name(), 'readonly', task);\n};\n\n/**\n * Deletes one or more records from the store using a query.\n * @method Store#del\n * @instance\n * @param  {query} query \n * @param  {object} [options]\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nStore.prototype.del = function (\n  query,\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let args = [query, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: del\n  };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n\n/**\n * Counts the records in the store.\n * @method Store#count\n * @instance\n * @param  {function} successCallback Function called on success. Receives result (number), origin and query as parameters.\n * @param  {object} [options] \n * @param  {query} [options.query] The query used to select the records to count.Array\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nStore.prototype.count = function (\n  successCallback,\n  { query, errorCallback = voidFn } = {}\n) {\n  var args = [query, successCallback, errorCallback];\n  var task = {\n    args: args,\n    fn: count\n  };\n\n  initTasks(this.name(), 'readonly', task);\n};\n\n/**\n * Deletes an Index from the store.\n * @method Store#delIndex\n * @instance\n * @param  {string} indexName Name of the index.\n * @param  {object} [options] \n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nStore.prototype.delIndex = function (\n  indexName,\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let args = [this.name(), indexName, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: delIndex\n  };\n\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\n/**\n * Iterates the store by applying a function to each record in a specified property.\n * @method Store#aggregateFn\n * @instance\n * @param  {string} property Represents the column to apply the aggregate function.\n * @param  {aggregateFunction} aggregatefn Function applied over the records. \n * @param  {function} successCallback Function called on success. Receives result, origin and query as parameters.\n * @param  {object} [options]\n * @param  {query} [options.query] The query used to select records.errorCallback.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Sends to mySuccesCallback the average age of employees with salary highter than 1500\n * //\n * store.aggregateFn('age', mydb.aggregateFuncs.avg, mySuccesCallback, {query: 'salary > 1500'});\n * \n * mydb.execTasks();\n */\nStore.prototype.aggregateFn = function (\n  property,\n  aggregatefn,\n  successCallback = voidFn,\n  { query, errorCallback = voidFn } = {}\n) {\n  var origin = 'Store.aggregateFn()';\n  var args = {\n    property: property,\n    successCallback: successCallback,\n    aggregatefn: aggregatefn,\n    origin: origin,\n    query: query,\n    errorCallback: errorCallback\n  };\n\n  tasks.push(tkOpen);\n  initStore(this.name(), 'readonly');\n  makeAggregateTask(args);\n};\n\n/**\n * Updates one or more records in the store.\n * @method Store#update\n * @instance\n * @param  {query} query The query used to select the records to update.\n * @param  {object} objectValues Object wich contains the properties with the new values.<br>\n * Example: {property1: newValue1, property4: newValue4}<br>\n * The value can be a function that receives the old value and returns a new value:<br>\n * Example: {property2: function(oldValue){return oldValue + 100;}}\n * @param  {object} [options]\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Updates salary of record with primary key 4 (only in the case that object store has autoincrement primary key)\n * //\n * store.update(4, {salary: 1200});\n * \n * // Updates salary and age of Peter\n * //\n * store.update('name = Peter', {age: 33, salary: 1150});\n * \n * // Increases salary of employees with age > 40 by 100 using a function\n * //\n * store.update(\n *     'age > 40', \n *     {\n *         salary: function(oldSalary){ return oldSalary + 100;} \n *     }\n * );\n * \n * mydb.execTasks();\n */\nStore.prototype.update = function (\n  query,\n  objectValues,\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let options = { successCallback, errorCallback };\n  let args = [query, objectValues, options];\n  let task = {\n    args: args,\n    fn: update\n  };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n\n/**\n * Deletes all records in the object store.\n * @method Store#clear\n * @instance\n * @param  {object} options\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument. \n * @return {void}\n */\nStore.prototype.clear = function ({ successCallback = voidFn, errorCallback = voidFn }) {\n  let options = { successCallback, errorCallback };\n  let args = [options];\n  let task = {\n    args: args,\n    fn: clear\n  };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n","import {\n  _qrySys,\n  aggregateLog,\n  checkTasks,\n  countLog,\n  cursorAggregate,\n  cursorCount,\n  cursorGetRecords,\n  cursorLoop,\n  db,\n  done,\n  initCursorLoop,\n  isKey,\n  lastErrorObj,\n  logEnum,\n  logger,\n  makeErrorObject,\n  queryLog,\n  requestErrorAction,\n  requestSuccessAction,\n  setSharedObj,\n  tasks,\n  tkOpen,\n  tryGetAll,\n  tryGetByKey,\n  tryOpenCursor,\n  voidFn,\n} from './index.js';\n\n//// Private variables //////////////////////////////\nlet _index = null;\nlet qrySys = _qrySys;\n\nfunction setIndex(storeName, indexName, rwMode) {\n  _index = null;\n  let origin = 'initIndex()';\n  try {\n    let objectStore = db.transaction(storeName, rwMode).objectStore(storeName);\n    _index = objectStore.index(indexName);\n  } catch (e) {\n    makeErrorObject(origin, e);\n    logger(lastErrorObj, true);\n  }\n  done();\n}\n\n// Adds setIndex to the task queue\nfunction initIndex(storeName, indexName, rwMode) {\n  let args = [storeName, indexName, rwMode];\n  let task = {\n    args: args,\n    fn: setIndex\n  };\n\n  tasks.push(task);\n}\n\n// Gets all records from a store\nfunction getAll(successCallback, errorCallback) {\n  let origin = 'Index.getAll()';\n  logger(origin + logEnum.begin);\n\n  let request = tryGetAll(origin, _index, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event.target.result,\n      origin,\n      successCallback,\n      `All records returned from index \"${_index.name}\"`\n    );\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Gets records filtered by a query\nfunction get(query, successCallback, errorCallback) {\n  let origin = 'Index.get()';\n  logger(origin + logEnum.begin);\n  if (isKey(query)) {\n    getBykey(query, successCallback, errorCallback);\n    return;\n  }\n  let resultFiltered = [];\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  let obj = {\n    counter: 0,\n    source: _index.name,\n    extMode: extMode,\n    event: resultFiltered,\n    resultFiltered: resultFiltered,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: queryLog,\n    cursorFunction: cursorGetRecords,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  let request = tryOpenCursor(origin, _index, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Gets records with key as query\nfunction getBykey(query, successCallback, errorCallback) {\n  let origin = 'Index.getByKey()';\n  logger(origin + logEnum.begin);\n\n  let request = tryGetByKey(origin, _index, query, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    successCallback(event.target.result, origin, query);\n    db.close();\n    logger(`Records with key \"${query}\" returned from index \"${_index.name}\"`);\n    done();\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Counts records filtered by a query\nfunction count(query, successCallback, errorCallback) {\n  let origin = 'Index.count()';\n  logger(origin + logEnum.begin);\n\n  if (!query) {\n    countAll(successCallback, errorCallback);\n    return;\n  }\n\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  /// Object used by cursorLoop()\n  let obj = {\n    counter: 0,\n    get event() {\n      return this.counter;\n    },\n    source: _index.name,\n    extMode: extMode,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: countLog,\n    cursorFunction: cursorCount,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  initCursorLoop(_index, errorCallback);\n}\n\n// Counts all records in the index\nfunction countAll(successCallback, errorCallback) {\n  let origin = 'Index.countAll()';\n  logger(origin + logEnum.begin);\n  let request = _index.count();\n\n  request.onsuccess = function (event) {\n    let message = `${event.target.result} records in index \"${_index.name}\"`;\n    requestSuccessAction(event.target.result, origin, successCallback, message);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Apply a function (aggregatefn) to the values of a property.\nfunction getaggregateFunction(\n  property,\n  aggregatefn,\n  successCallback = voidFn,\n  origin,\n  { query, errorCallback = voidFn }\n) {\n  logger(origin + logEnum.begin);\n\n  var commonArgs = {\n    origin: origin,\n    property: property,\n    aggregatefn: aggregatefn,\n    successCallback: successCallback,\n    errorCallback: errorCallback\n  };\n\n  if (!query) getaggregateFunctionA(commonArgs);\n  else getAggregateFunctionB(query, commonArgs);\n}\nfunction getaggregateFunctionA({\n  origin,\n  property,\n  aggregatefn,\n  successCallback,\n  errorCallback\n}) {\n  let actualValue = null;\n  let counter = 0;\n\n  let request = tryOpenCursor(origin, _index, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n\n    if (cursor) {\n      if (cursor.value[property]) {\n        counter++;\n        actualValue = aggregatefn(actualValue, cursor.value[property], counter);\n      }\n      cursor.continue();\n    } else {\n      successCallback(actualValue, origin);\n      db.close();\n      logger(`Result of ${origin} on property \"${property}\": ${actualValue}`);\n      done();\n    }\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\nfunction getAggregateFunctionB(\n  query,\n  { origin, property, aggregatefn, successCallback, errorCallback }\n) {\n  if (isKey(query)) {\n    query = _index.keyPath + '=' + query;\n  }\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  let obj = {\n    counter: 0,\n    actualValue: null,\n    get event() {\n      return this.actualValue;\n    },\n    property: property,\n    aggregatefn: aggregatefn,\n    extMode: extMode,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: aggregateLog,\n    cursorFunction: cursorAggregate,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  /// request definition\n  let request = tryOpenCursor(origin, _index, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Adds getaggregateFunction() to the task queue\nfunction makeAggregateTask({\n  property,\n  successCallback,\n  aggregatefn,\n  origin,\n  query,\n  errorCallback\n}) {\n  let options = {\n    query: query,\n    errorCallback: errorCallback\n  };\n\n  let args = [property, aggregatefn, successCallback, origin, options];\n\n  tasks.push({ args: args, fn: getaggregateFunction });\n}\n\nfunction initTasks(storeName, indexName, task) {\n  tasks.push(tkOpen);\n  initIndex(storeName, indexName, 'readonly');\n  tasks.push(task);\n}\n\n/**\n * Constructs a Sixdb Index instance. This constructor is used via Store.openStore() method.\n * @class\n * @param  {string} storeName Name of the parent store.\n * @param  {string} indexName Name of the index.\n * @return {object}\n */\nexport let Index = function (storeName, indexName) {\n  let _indexName = indexName;\n  let _storeName = storeName;\n\n  /**\n   * Gets the name of the index.\n   * @method Index#name\n   * @return  {string} Name of the index.\n   */\n  this.name = function () {\n    return _indexName;\n  };\n\n  /**\n   * Gets the name of the parent store.\n   * @method Index#storeName\n   * @return  {string} Name of the parent store.\n   */\n  this.storeName = function () {\n    return _storeName;\n  };\n\n  //// Public methods /////////////////////////////////////\n  /*\n  this.getAll;\n  this.get;\n  this.count;\n  this.aggregateFn;\n  */\n};\n\n/**\n * Gets all records from the index.\n * @method Index#getAll\n * @instance\n * @param  {function} successCallback Function called on success. Receives event and origin as parameters.\n * @param  {function} [errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Instantiates the index \"Names\"\n * //\n * let index = store.openIndex('Names');\n * \n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n *\n *\n * //\n * // Callback function to process the result\n * //\n * const myCallback = function(result){\n *\n *     if(Array.isArray(result)){\n *         for(let i = 0, j = result.length; i < j; i++)\n *         console.log(`Name: ${result[i].name} Age: ${result[i].age} Salary: ${result[i].salary}\\n`);\n *     } else {\n *         console.log(`Name: ${result.name} Age: ${result.age} Salary:{result.salary}`);\n *     }\n * };\n *\n *\n * //\n * // Gets all records from the index \"Names\" in store \"southFactory\"\n * //\n * index.getAll(myCallback);\n *  \n *\n *\n * // Execs all pending tasks\n * mydb.execTasks();\n*/\nIndex.prototype.getAll = function (successCallback = voidFn, errorCallback = voidFn) {\n  let args = [successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: getAll\n  };\n\n  initTasks(this.storeName(), this.name(), task);\n};\n\n/**\n * Gets one or more records from an index using a query.\n * @method Index#get\n * @instance\n * @param  {query} query The query to select the records.\n * @param  {function} successCallback Function called on success. Receives event and origin as parameters.\n * @param  {function} [errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Instantiates the index \"Names\"\n * //\n * let index = store.openIndex('Names');\n * \n * // Gets all records with salary > 1200 and age < 40 in index \"Names\"\n * //\n * index.get('salary > 1200 & age < 40', mySuccesCallback);\n * \n * mydb.execTasks();\n * \n */\nIndex.prototype.get = function (query, successCallback = voidFn, errorCallback = voidFn) {\n  let args = [query, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: get\n  };\n\n  initTasks(this.storeName(), this.name(), task);\n};\n\n/**\n * Counts the records in an index.\n * @method Index#count\n * @instance\n * @param  {function} successCallback Function called on success. Receives result (number), origin and query as parameters.\n * @param  {object} [options] \n * @param  {query} [options.query] The query used to select the records to count.Array\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nIndex.prototype.count = function (\n  successCallback = voidFn,\n  { query, errorCallback = voidFn } = {}\n) {\n  let args = [query, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: count\n  };\n\n  initTasks(this.storeName(), this.name(), task);\n};\n\n/**\n * Iterates the index by applying a function to each record in a specified property.\n * @method Index#aggregateFn\n * @instance\n * @param  {string} property Represents the column to apply the aggregate function.\n * @param  {aggregateFunction} aggregatefn Function applied over the records. \n * @param  {function} successCallback Function called on success. Receives result, origin and query as parameters.\n * @param  {object} [options]\n * @param  {query} [options.query] The query used to select records.errorCallback.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Instantiates the index \"Names\"\n * //\n * let index = store.openIndex('Names');\n * \n * // Sends to mySuccesCallback the average age of employees with salary highter than 1500\n * //\n * index.aggregateFn('age', mydb.aggregateFuncs.avg, mySuccesCallback, {query: 'salary > 1500'});\n * \n * mydb.execTasks();\n */\nIndex.prototype.aggregateFn = function (\n  property,\n  aggregatefn,\n  successCallback = voidFn,\n  { query, errorCallback } = {}\n) {\n  let origin = 'Index.aggregateFn()';\n  let args = {\n    property: property,\n    successCallback: successCallback,\n    aggregatefn: aggregatefn,\n    origin: origin,\n    query: query,\n    errorCallback: errorCallback\n  };\n\n  tasks.push(tkOpen);\n  initIndex(this.storeName(), this.name(), 'readonly');\n  makeAggregateTask(args);\n};\n","export let lastErrorObj = {};\n\nexport function makeErrorObject(origin, domException) {\n  let errorObj = {};\n  if (domException) {\n    errorObj.type = domException.name;\n    errorObj.origin = origin;\n    errorObj.description = domException.message;\n  }\n\n  lastErrorObj = errorObj;\n\n  return true;\n}\n","/**\n * @author       Juan Jose Capellan <soycape@hotmail.com>\n * @copyright    2018 Juan Jose Capellan\n * @license      {@link https://github.com/jjcapellan/SIXDB/blob/master/LICENSE | MIT license}\n */\n\nimport {\n  _qrySys,\n  done,\n  execTasks,\n  logEnum,\n  logger,\n  requestErrorAction,\n  requestSuccessAction,\n  Store,\n  tasks,\n} from './index.js';\n\n\nlet db = null;\nlet dbName;\nconst voidFn = function () {\n  return 0;\n};\n\n// Opens the database and stores the result in db\nfunction openDb() {\n  let request = window.indexedDB.open(dbName);\n\n  request.onerror = function () {\n    alert('Error. You must allow web app to use indexedDB.');\n  };\n\n  request.onsuccess = function (event) {\n    db = event.target.result;\n    done();\n  };\n}\n\n// Predefined task to open the actual database\nconst tkOpen = { args: null, fn: openDb };\n\n// Allows other modules modify variable db\nfunction setDb(_db) {\n  db = _db;\n}\n\nfunction checkStore(storeName, callback) {\n  let origin = 'Sixdb.checkStore()';\n  logger(origin + logEnum.begin);\n  let exists = db.objectStoreNames.contains(storeName);\n  db.close();\n  callback(exists, origin);\n  done();\n  return;\n}\n\n// Creates a store in the database\nfunction newStore(\n  storeName,\n  { keyPath, autoIncrement, successCallback, errorCallback } = {}\n) {\n  let version;\n  let origin = 'Sixdb.newStore()';\n  logger(origin + logEnum.begin);\n\n  // If store already exist then returns\n  if (db.objectStoreNames.contains(storeName)) {\n    db.close();\n    logger(`Object store \"${storeName}\" already exists`);\n    done();\n    return;\n  }\n\n  version = db.version;\n  db.close();\n  let newVersion = version + 1;\n  let _store;\n\n  let request = window.indexedDB.open(dbName, newVersion);\n\n  request.onupgradeneeded = function (event) {\n    db = event.target.result;\n\n    try {\n      _store = db.createObjectStore(storeName, {\n        keyPath: keyPath,\n        autoIncrement: autoIncrement\n      });\n    } catch (e) {\n      requestErrorAction(origin, e, errorCallback);\n      return;\n    }\n\n    _store.onerror = function (event) {\n      requestErrorAction(origin, event.target.error, errorCallback);\n    };\n  };\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `New object store \"${storeName}\" created`\n    );\n  };\n}\n\nfunction delStore(storeName, { successCallback, errorCallback }) {\n  let origin = 'Sixdb.delStore()';\n  logger(origin + logEnum.begin);\n\n  //// Gets the new version\n  //\n  let version = db.version;\n  db.close();\n  let newVersion = version + 1;\n\n  //// The change of the database schema only can be performed in the onupgradedneeded event\n  //// so a new version number is needed to trigger that event.\n  //\n  let request = window.indexedDB.open(dbName, newVersion);\n\n  request.onupgradeneeded = function (event) {\n    db = event.target.result;\n    db.deleteObjectStore(storeName);\n  };\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `Object store \"${storeName}\" deleted`\n    );\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\nfunction delDB({ successCallback, errorCallback }) {\n  let origin = 'Sixdb.destroy()';\n  logger(origin + logEnum.begin);\n\n  let request = window.indexedDB.deleteDatabase(dbName);\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n\n  request.onsuccess = function (event) {\n    successCallback(event, origin);\n    logger(`Database \"${dbName}\" deleted`);\n    done();\n  };\n}\n\n// Join operation. (ON store1.primaryKey = store2.index.keyPath)\nfunction join({ store1Name, store2Name, indexName, succesCallback, errorCallback }) {\n  let joinResult = [];\n  let store1Result = [];\n  let store2Result = [];\n  let origin = 'getJoin()';\n  logger(origin + logEnum.begin);\n  let transaction = db.transaction([store1Name, store2Name]);\n  let indexKeyPath;\n  let posCursor1 = 0;\n  let posCursor2 = 0;\n  let store1ResultLength;\n  let store2ResultLength;\n\n  let store1 = transaction.objectStore(store1Name);\n  let store1KeyPath = store1.keyPath;\n  store1.getAll().onsuccess = function (event) {\n    store1Result = event.target.result;\n    store1ResultLength = store1Result.length;\n\n    let store2 = transaction.objectStore(store2Name);\n    let store2Index = store2.index(indexName);\n    store2Index.getAll().onsuccess = function (event) {\n      store2Result = event.target.result;\n      store2ResultLength = store2Result.length;\n      console.log(store2ResultLength);\n      indexKeyPath = store2Index.keyPath;\n      makeJoinResult();\n    };\n  };\n\n  function makeJoinResult() {\n    if (\n      store1Result[posCursor1][store1KeyPath] == store2Result[posCursor2][indexKeyPath]\n    ) {\n      joinResult.push(Object.assign(store2Result[posCursor2], store1Result[posCursor1]));\n      posCursor2++;\n    } else {\n      posCursor1++;\n    }\n\n    if (posCursor1 == store1ResultLength || posCursor2 == store2ResultLength) {\n      requestSuccessAction(\n        joinResult,\n        origin,\n        successCallback,\n        'Join operation completed'\n      );\n    } else {\n      makeJoinResult();\n    }\n  }\n}\n\n/**\n * Constructs a Sixdb instance.\n * @class\n * @param  {string} _dbName Name of the database \n */\nwindow.Sixdb = function (_dbName) {\n  dbName = _dbName;\n\n  // Query system from qrySys.js\n  let qrySys = _qrySys;\n\n  // Creates or opens the database\n  function newDB(errorCallback = voidFn) {\n    let request = window.indexedDB.open(dbName);\n    let origin = 'Sixdb.newDB()';\n    logger(origin + logEnum.begin);\n\n    // Boolean: Database doesn't exist\n    let noDb = false;\n\n    // if onupgradeneeded means is a new database\n    request.onupgradeneeded = function () {\n      noDb = true;\n    };\n\n    request.onsuccess = function (event) {\n      let db = event.target.result;\n      db.close();\n      if (noDb) {\n        logger(`Database \"${dbName}\" created`);\n      } else {\n        logger(`Database \"${dbName}\" already exists`);\n      }\n      done();\n    };\n  }\n\n  // Adds newDB function to the task queue\n  function addDB(errorCallback) {\n    let args = [errorCallback];\n    let task = {\n      args: args,\n      fn: newDB\n    };\n    tasks.push(task);\n  }\n\n  //// public functions declaration /////////////////\n  this.name;\n  this.setConsoleOff;\n  this.customTask;\n  this.aggregateFuncs;\n  this.execTasks;\n  this.setCustomOperator;\n  this.checkStore;\n  this.newStore;\n  this.openStore;\n  this.delStore;\n  this.destroy;\n\n  //// Initialization ///////////////////////////////\n  qrySys.init();\n  addDB();\n  execTasks();\n};\n\n/**\n * Gets the database name.\n * @method window.Sixdb#name\n * @instance\n * @return Name of the database\n */\nSixdb.prototype.name = function () {\n  return dbName;\n};\n\n/**\n * Sets the consoleOff value.\n * @param  {boolean} _consoleOff If true, the console output is off and only errors appear in console.\n */\nSixdb.prototype.setConsoleOff = function (_consoleOff) {\n  consoleOff = _consoleOff;\n};\n\n/**\n * Add a specific function to the Sixdb task queue.\n * @method window.Sixdb#customTask\n * @instance\n * @param  {function} fn Our custom function that we want to add to the task queue.\n * @param  {object} context Usually the keyword \"this\"\n * @param  {...any} args Arguments for the function.\n * @example\n * var mydb = new Sixdb('companyDB');\n * \n * // Creates new store\n * mydb.newStore('southFactory');\n * \n * // Opens the store in a variable\n * var store = mydb.openStore('southFactory');\n *\n *\n * // Inserts one record in \"southFactory\" object store.\n * //\n * store.add(\n *    {ID: 1, name: 'Peter', department: 'manufacturing', age: 32, salary: 1200}\n * );\n *\n *\n * //\n * // To add an own function to the task queue, the method  customTask() of the Sixdb object is used\n * //\n * //     customTask( fn, context, args)\n * //\n * // This task is executed after the previous insertion task and before the next reading task.\n * //\n * mydb.customTask(\n *    function(m){                                // Custom function\n *        alert(m);\n *    },\n *    this,                                       // Context. Usually \"this\".\n *    'Inserting operation finished !!'           // Arguments of the function. Can be a variable number of arguments.\n * );\n *\n *\n *\n * // Reads all records from \"southFactory\" object store.\n * //\n * store.getAll(mySuccessCallback);\n *\n *\n * // ***** VERY IMPORTANT ****\n * // Once we have introduced the operations that we want to perform on the database,\n * // we must use the function execTasks() to execute them.\n * //\n * mydb.execTasks();\n */\nSixdb.prototype.customTask = function (fn, context, args) {\n  let argsArray = [];\n  if (args) {\n    for (let i = 2, j = arguments.length; i < j; i++) {\n      argsArray[2 - i] = arguments[i];\n    }\n  }\n  let task = { type: 'custom', fn: fn, context: context, args: argsArray };\n\n  tasks.push(task);\n};\n/** \n * Contains predefined aggregate functions to use in aggregateFn method.<br>\n * The method aggregateFn accepts too custom functions.\n * \n * @memberof window.Sixdb\n * @namespace\n*/\nSixdb.prototype.aggregateFuncs = {\n  /**\n   * Sums two values\n   * @param  {string | number} actual Acumulated value\n   * @param  {string | number} selected Selected value\n   * @return {string | number} Returns the sum.\n   */\n  sum(actual, selected) {\n    return actual + selected;\n  },\n\n  /**\n   * Calculates the average value.\n   * @param  {number} actual Acumulated value.\n   * @param  {number} selected Selected value.\n   * @param  {number} counter Number of elements.\n   * @return {number} average value.\n   */\n  avg(actual, selected, counter) {\n    return (actual * (counter - 1) + selected) / counter;\n  },\n\n  /**\n   * Returns the maximum value.\n   * @param  {string | number} actual \n   * @param  {string | number} selected \n   * @return {string | number} The maximum value.\n   */\n  max(actual, selected) {\n    return selected > actual ? selected : actual;\n  },\n\n  /**\n   * Returns the minimum value.\n   * @param  {string | number} actual \n   * @param  {string | number} selected \n   * @param  {number} counter Number of iteration.\n   * @return {string | number} The minimum value.\n   */\n  min(actual, selected, counter) {\n    if (counter == 1) {\n      // First value of actual is null. Without this, min is allways null\n      actual = selected;\n    }\n    return selected < actual && counter > 1 ? selected : actual;\n  }\n};\n\n/**\n   * Sets customOperator. To make the queries we can add to the Sixdb comparison operators our own operator.<br>\n   * This operator will be represented by <b>~~</b>.\n   * @method window.Sixdb#setCustomOperator\n   * @instance\n   * @param  {function} compareFunction Function to compare a property value with a test value.<br>\n   * @example\n   * var mydb = new Sixdb('myDatabase');\n   *\n   * //\n   * // The compare function must have two arguments, property value and test value. If this function triggers\n   * // an error exception, then the query system returns the condition as false.\n   * //\n   * mydb.setCustomOperator(\n   *     function(propertyValue, testValue){\n   *         return (propertyValue.length == testValue.length);\n   *     });\n   *\n   */\nSixdb.prototype.setCustomOperator = function (compareFunction) {\n  if (compareFunction) {\n    if (typeof compareFunction == 'function') {\n      if (compareFunction.length == 2) {\n        customOperator = compareFunction;\n      }\n    }\n  }\n};\n\n/**\n   * Execs pending tasks. The tasks are executed sequentially.\n   * A task does not run until the previous one ends.\n   * <br>This avoids problems arising from the asynchronous nature of the indexedDB api.\n   * @method window.Sixdb#execTask\n   * @instance\n   */\nSixdb.prototype.execTasks = function () {\n  execTasks();\n};\n\n/**\n * Gets all records from the object store.\n * @method window.Sixdb#checkStore\n * @instance\n * @param {string} storeName Name of the store \n * @param  {function} callback Receives a boolean (true if store exists in the database) and origin as parameters. \n * @example\n * mydb.checkStore('Products', (exists) => {\n *  if(exists){\n *   console.log('Store Products exists in this database')\n *  }\n * });\n */\nSixdb.prototype.checkStore = function (storeName, callback = voidFn) {\n  let args = [\n    storeName,\n    callback\n  ];\n  let task = {\n    args: args,\n    fn: checkStore\n  };\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\n/**\n * Creates a task wich creates a store object in the database.\n * @method window.Sixdb#newStore\n * @instance\n * @param  {string} storeName The store name.\n * @param  {object} [options]\n * @param  {string} [options.keyPath] The key path to be used by the new object store. \n * <br>If empty or not specified, the object store is created without a key path and uses out-of-line keys. \n * <br>You can also pass in an array as a keyPath.\n * @param  {Boolean} [options.autoIncrement] If true, the object store has a key generator. Defaults to false.\n * @param  {function} [options.succesCallback] Function called on success. Receives as parameters event and origin.\n * @param  {function} [options.errorCallback] Optional function to handle errors. Receives an error object as argument.\n */\nSixdb.prototype.newStore = function (\n  storeName,\n  { keyPath, autoIncrement, successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let args = [\n    storeName,\n    {\n      keyPath: keyPath,\n      autoIncrement: autoIncrement,\n      successCallback: successCallback,\n      errorCallback: errorCallback\n    }\n  ];\n  let task = {\n    args: args,\n    fn: newStore\n  };\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\n/**\n * Returns an existing store object ready to use\n * @method window.Sixdb#openStore\n * @instance\n * @param  {string} storeName Name of the store.\n * @return {object}\n */\nSixdb.prototype.openStore = function (storeName) {\n  return new Store(storeName);\n};\n\n/**\n * Deletes an object store.\n * @method window.Sixdb#delStore\n * @instance\n * @param  {string} storeName Name of the object store. \n * @param  {object} options\n * @param  {function} [options.succesCallback] Function called on success. Receives as parameters event and origin.\n * @param  {function} [options.errorCallback] Optional function to handle errors. Receives an error object as argument.\n */\nSixdb.prototype.delStore = function (\n  storeName,\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let options = {\n    successCallback: successCallback,\n    errorCallback: errorCallback\n  };\n  let args = [storeName, options];\n  let task = {\n    args: args,\n    fn: delStore\n  };\n\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\n/**\n * The current database is deleted.\n * @method window.Sixdb#destroy\n * @instance\n * @param  {object} options\n * @param  {function} [options.succesCallback] Function called on success. Receives as parameters event and origin.\n * @param  {function} [options.errorCallback] Optional function to handle errors. Receives an error object as argument.\n */\nSixdb.prototype.destroy = function (\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let options = {\n    successCallback: successCallback,\n    errorCallback: errorCallback\n  };\n\n  let args = [options];\n  let task = {\n    args: args,\n    fn: delDB\n  };\n\n  tasks.push(task);\n};\n\n/**\n * Creates a join operation on two stores. Joins those objects where store1.keypath = store2.index.keypath <br>\n * and returns the result to a success callback.\n * @method window.Sixdb#join\n * @instance\n * @param  {object} options\n * @param  {string} options.store1Name Name of the store with a primary unique key\n * @param  {string} options.store2Name Name of the second store\n * @param  {string} options.indexName Name of the second store index\n * @param  {function} options.succesCallback Function called on success. Receives as parameters the join result and origin.\n * @param  {function} [options.errorCallback] Optional function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in store \"Employees\"\n * //\n * let person = {\n *     id: 1,                // <<<<<< keyPath of store1\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * // An example of object stored in store \"Productions\"\n * //\n * let report = {\n *     reportId: 5,                \n *     employeeId: 1,        // <<<<<<<<<< keyPath of index \"employeeIds\" in store \"Productions\"\n *     production: 150\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * mydb.join(\n * {\n * store1Name: 'Employees',\n * store2Name: 'Productions',\n * indexName: 'employeeIds',\n * successCallback: mySuccessCallback\n * }\n * );\n * \n * // The expected results array received by the successCallback contains objects like:\n * // {id:1, name:'Peter, age:32, salary:1100, reportId:5, employeeId:1, production:150}   <<<<<<< id = employeeId\n * \n *  \n * mydb.execTasks();\n */\nSixdb.prototype.join = function ({\n  store1Name,\n  store2Name,\n  indexName,\n  succesCallback = voidFn,\n  errorCallback = voidFn\n}) {\n  let args = [\n    {\n      store1Name,\n      store2Name,\n      indexName,\n      succesCallback,\n      errorCallback\n    }\n  ];\n\n  let task = {\n    args: args,\n    fn: join\n  };\n\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\nexport { /*consoleOff,*/ db, newStore, dbName, tkOpen, setDb, voidFn };\n","import {\n  _qrySys,\n  checkTasks,\n  db,\n  done,\n  lastErrorObj,\n  logger,\n  makeErrorObject,\n  tasks,\n} from './index.js';\n\nconst qrySys = _qrySys;\nlet sharedObj = {};\n\nfunction testCursor(conditionsBlocksArray, exitsInFirst, cursor) {\n  let test = false;\n  let i = 0;\n  let size = conditionsBlocksArray.length;\n  for (i = 0; i < size; i++) {\n    let conditions = conditionsBlocksArray[i].conditionsArray;\n    let intMode = conditionsBlocksArray[i].internalLogOperator;\n    test = qrySys.testConditionBlock(cursor, conditions, intMode);\n    if (test == exitsInFirst) {\n      break;\n    }\n  }\n  return test;\n}\n\nfunction reportCatch(origin, e, errorCallback) {\n  makeErrorObject(origin, e);\n  tasks.shift();\n  db.close();\n  errorCallback(lastErrorObj);\n  logger(lastErrorObj, true);\n}\n\nexport function cursorAggregate(cursor) {\n  if (cursor.value[sharedObj.property]) {\n    sharedObj.counter++;\n    sharedObj.actualValue = sharedObj.aggregatefn(\n      sharedObj.actualValue,\n      cursor.value[sharedObj.property],\n      sharedObj.counter\n    );\n  }\n}\n\nexport function aggregateLog() {\n  logger(\n    `Result of ${sharedObj.origin} on property \"${sharedObj.property}\": ${sharedObj.actualValue}`\n  );\n}\n\nexport function setSharedObj(obj) {\n  sharedObj = obj;\n}\n\nexport function requestSuccessAction(event, origin, successCallback, message) {\n  successCallback(event, origin);\n  db.close();\n  logger(message);\n  done();\n}\n\nexport function requestErrorAction(origin, error, errorCallback) {\n  db.close();\n  makeErrorObject(origin, error);\n  logger(lastErrorObj, true);\n  tasks.shift();\n  errorCallback(lastErrorObj);\n  checkTasks();\n}\n\nexport function tryGetAll(origin, source, errorCallback) {\n  let request = null;\n  try {\n    request = source.getAll();\n  } catch (e) {\n    reportCatch(origin, e, errorCallback);\n    return null;\n  }\n  return request;\n}\n\nexport function tryOpenCursor(origin, source, errorCallback) {\n  let request = null;\n  try {\n    request = source.openCursor();\n  } catch (e) {\n    reportCatch(origin, e, errorCallback);\n    return null;\n  }\n  return request;\n}\n\nexport function cursorLoop(cursor) {\n  if (cursor) {\n    let test = testCursor(\n      sharedObj.conditionsBlocksArray,\n      sharedObj.exitsInFirstTrue,\n      cursor\n    );\n\n    if (test) {\n      sharedObj.cursorFunction(cursor);\n    }\n    cursor.continue();\n  } else {\n    sharedObj.successCallback(sharedObj.event, sharedObj.origin, sharedObj.query);\n    db.close();\n    sharedObj.logFunction();\n    done();\n  }\n}\n\nexport function cursorGetRecords(cursor) {\n  sharedObj.resultFiltered.push(cursor.value);\n  sharedObj.counter++;\n}\n\nexport function cursorDelRecords(cursor) {\n  cursor.delete();\n  sharedObj.counter++;\n}\n\nexport function cursorCount() {\n  sharedObj.counter++;\n}\n\nexport function cursorUpdate(cursor) {\n  let updateData = cursor.value;\n  for (let i = 0, j = sharedObj.newObjectValuesSize; i < j; i++) {\n    // If the new value for the property keys[i] is a function then the new value is function(oldValue)\n    updateData[sharedObj.keys[i]] =\n      typeof sharedObj.objectValues[sharedObj.keys[i]] == 'function'\n        ? sharedObj.objectValues[sharedObj.keys[i]](updateData[sharedObj.keys[i]])\n        : sharedObj.objectValues[sharedObj.keys[i]];\n  }\n\n  cursor.update(updateData);\n  sharedObj.counter++;\n}\n\nexport function countLog() {\n  logger(\n    `Processed query finished: \"${sharedObj.query}\"\\n ${sharedObj.counter} records counted from the query to: \"${sharedObj.source}\"`\n  );\n}\n\nexport function queryLog() {\n  logger(\n    `Processed query: \"${sharedObj.query}\" finished\\n ${sharedObj.counter} records returned from object store \"${sharedObj.source}\"`\n  );\n}\n\nexport function tryGetByKey(origin, source, key, errorCallback) {\n  let request = null;\n  try {\n    request = source.getAll(key);\n  } catch (e) {\n    reportCatch(origin, e, errorCallback);\n    return null;\n  }\n  return request;\n}\n\nexport function isKey(query) {\n  let isKey = false;\n  if (query) {\n    if (typeof query == 'number') {\n      isKey = true;\n    } else {\n      isKey = query.match(qrySys.operatorRgx) ? false : true;\n    }\n  }\n  return isKey;\n}\n\nexport function initCursorLoop(source, errorCallback) {\n  let request = tryOpenCursor(sharedObj.origin, source, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n","export { _qrySys } from './qrySys.js';\nexport { tasks, done, execTasks, checkTasks } from './taskQueue';\nexport { logEnum, logger } from './logger.js';\nexport { Store } from './sixdbStore';\nexport { Index } from './sixdbIndex';\nexport { makeErrorObject, lastErrorObj } from './errorSys';\nexport { db, dbName, setDb, tkOpen, voidFn, /*customOperator, consoleOff*/ } from './sixdb';\nexport {\n    aggregateLog,\n    countLog,\n    cursorAggregate,\n    cursorCount,\n    cursorDelRecords,\n    cursorGetRecords,\n    cursorLoop,\n    cursorUpdate,\n    initCursorLoop,\n    isKey,\n    queryLog,\n    requestErrorAction,\n    requestSuccessAction,\n    setSharedObj,\n    tryGetAll,\n    tryGetByKey,\n    tryOpenCursor,\n} from './helpers';\n\n\nwindow.consoleOff = false;\nwindow.customOperator = function (value1, value2) {\n    return value1 == value2;\n  };"],"names":["init","this","blockRgx","blockOperatorRgx","operatorRgx","rightOperandRgx","leftOperandRgx","makeConditionsBlocksArray","query","conditionsBlocksArray","match","t","extLogOperator","blocks","pushConditionBlockToArray","deleteLeftParentheses","i","length","size","substr","leftOperands","rightOperands","replace","trim","operators","conditionsArray","push","keyPath","cond","value","internalLogOperator","externalLogOperator","logOperatorsType","_i2","testConditionBlock","cursor","operator","test","testCondition","value1","condition","value2","result","indexOf","customOperator","e","idle","tasks","checkTasks","logger","task","type","logEnum","begin","fn","apply","context","args","done","shift","execTasks","message","isError","consoleOff","console","error","log","qrySys","_qrySys","setStore","storeName","rwMode","_store","db","transaction","objectStore","makeErrorObject","lastErrorObj","initStore","indexName","version","_ref","_temp","successCallback","errorCallback","origin","indexNames","contains","requestSuccessAction","close","window","indexedDB","open","dbName","request","onupgradeneeded","event","setDb","target","upgradeTransaction","createIndex","requestErrorAction","onsuccess","onerror","addRecord","obj","_ref2","Array","isArray","_ref3","objSize","counter","_loop","add","name","addRecordA","_ref4","addRecordB","getAll","tryGetAll","get","isKey","tryGetByKey","getBykey","extMode","setSharedObj","source","resultFiltered","exitsInFirstTrue","logFunction","queryLog","cursorFunction","cursorGetRecords","tryOpenCursor","cursorLoop","del","delByKey","cursorDelRecords","count","countLog","cursorCount","initCursorLoop","countAll","callback","exists","delIndex","deleteIndex","getaggregateFunction","property","aggregatefn","_ref5","voidFn","_ref5$errorCallback","commonArgs","_ref7","actualValue","aggregateLog","cursorAggregate","_ref6","getaggregateFunctionA","update","objectValues","_ref9","keys","Object","newObjectValuesSize","cursorUpdate","clear","_ref10","initTasks","tkOpen","Store","_storeName","prototype","newIndex","_temp2","_ref11","unique","_ref11$successCallbac","_ref11$errorCallback","openIndex","Index","_temp3","_ref12","checkIndex","_temp4","_ref13","_temp5","_ref14","_ref14$errorCallback","_temp6","_ref15","_ref15$successCallbac","aggregateFn","_temp7","_ref8","_ref16$errorCallback","_ref16","_ref17","_temp8","_ref17$errorCallback","_ref18","_ref18$errorCallback","_ref18$successCallbac","_index","setIndex","index","initIndex","_ref$errorCallback","getAggregateFunctionB","_indexName","domException","errorObj","description","exports","alert","_db","checkStore","objectStoreNames","autoIncrement","createObjectStore","deleteObjectStore","delDB","deleteDatabase","join","store1Name","store2Name","joinResult","store1Result","indexKeyPath","store1ResultLength","store2ResultLength","posCursor1","posCursor2","store1","store1KeyPath","makeJoinResult","store2Result","assign","store2Index","Sixdb","_dbName","noDb","setConsoleOff","_consoleOff","customTask","argsArray","j","arguments","aggregateFuncs","sum","actual","selected","avg","max","min","setCustomOperator","compareFunction","newStore","openStore","delStore","_ref6$errorCallback","_ref6$successCallback","destroy","_ref7$successCallback","_ref7$errorCallback","_ref8$succesCallback","succesCallback","_ref8$errorCallback","reportCatch","sharedObj","openCursor","exitsInFirst","testCursor","updateData","key"],"mappings":"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"}