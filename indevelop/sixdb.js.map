{"version":3,"file":"sixdb.js","sources":["../src/qrySys.js","../src/taskQueue.js","../src/logger.js","../src/sixdbStore.js","../src/sixdbIndex.js","../src/errorSys.js","../src/sixdb.js","../src/helpers.js","../src/index.js"],"sourcesContent":["export const _qrySys = {\n  init() {\n    this.blockRgx = /\\(.*?(?=\\))/g;\n    this.blockOperatorRgx = /[\\&\\|]+(?=(\\s*\\())/g;\n    this.operatorRgx = /(=|>|<|>=|<=|!=|<>|\\^|\\$|~~)+/g;\n    this.rightOperandRgx = /(?:([=><\\^\\$~]))\\s*[\"']?[^\"']+[\"']?\\s*(?=[&\\|])|(?:[=><\\^\\$~])\\s*[\"']?[^\"']+[\"']?(?=$)/g;\n    this.leftOperandRgx = /([^\"'\\s])(\\w+)(?=\\s*[=|>|<|!|\\^|\\$~])/g;\n  },\n\n  makeConditionsBlocksArray(query) {\n    let t = this;\n    let conditionsBlocksArray = [];\n\n    //// Gets blocks\n    //\n    let blocks = query.match(t.blockRgx);\n\n    // Logical operators between blocks, all must be the same type\n    let extLogOperator = query.match(t.blockOperatorRgx)\n      ? query.match(t.blockOperatorRgx)\n      : null;\n\n    // If condition is a single sentence like: \" a = 10 & b > 5 \"\n    if (!blocks) {\n      t.pushConditionBlockToArray(query, null, conditionsBlocksArray);\n      return conditionsBlocksArray;\n    }\n\n    // Delete left parentheses\n    t.deleteLeftParentheses(blocks);\n\n    // If condition is a multiple sentence like: \" (a = 5 & b = 10) || (c < 4 & f > 10) \"\n    if (extLogOperator) {\n      if (extLogOperator == '&' || extLogOperator == '&&') {\n        extLogOperator = 'and';\n      } else {\n        extLogOperator = 'or';\n      }\n    }\n\n    for (let i = 0; i < blocks.length; i++) {\n      t.pushConditionBlockToArray(blocks[i], extLogOperator, conditionsBlocksArray);\n    }\n    return conditionsBlocksArray;\n  },\n\n  deleteLeftParentheses(blocks) {\n    let size = blocks.length;\n    for (let i = 0; i < size; i++) {\n      blocks[i] = blocks[i].substr(1);\n    }\n  },\n\n  pushConditionBlockToArray(query, extLogOperator, conditionsBlocksArray) {\n    let t = this;\n    let leftOperands = query.match(t.leftOperandRgx);\n    let rightOperands = query.match(t.rightOperandRgx);\n\n    for (let i = 0; i < rightOperands.length; i++) {\n      // Delete the operator\n      while (rightOperands[i][0].match(/[=><!\\^\\$~]/g)) {\n        rightOperands[i] = rightOperands[i].substr(1);\n      }\n      // Delete quotes and trim white spaces\n      rightOperands[i] = rightOperands[i].replace(/[\"']/g, '').trim();\n    }\n\n    //// Gets operators\n    //// Removing righ operands (values) before extract comparison operators avoids\n    //// problems with literal values that include comparisson symbols(= , >,...) quoted.\n    //\n    for (let i = 0; i < rightOperands.length; i++) {\n      query = query.replace(rightOperands[i], '');\n    }\n    let operators = query.match(t.operatorRgx);\n\n    let conditionsArray = [];\n\n    // If query is like: \" c = 15 \"\n    if (leftOperands.length == 1) {\n      //{property, operator (=,>,<, ...), value}\n      conditionsArray.push({\n        keyPath: leftOperands[0],\n        cond: operators[0],\n        value: rightOperands[0]\n      });\n\n      conditionsBlocksArray.push({\n        conditionsArray: conditionsArray,\n        internalLogOperator: null,\n        externalLogOperator: extLogOperator\n      });\n\n      conditionsArray = null;\n    } else {\n      // if query is like: \" c = 15 & a > 30 \"\n      let logOperatorsType = query.match(/[\\&\\|]+/g)[0];\n\n      if (logOperatorsType == '&' || logOperatorsType == '&&') {\n        logOperatorsType = 'and';\n      } else {\n        logOperatorsType = 'or';\n      }\n\n      for (let i = 0; i < operators.length; i++) {\n        conditionsArray.push({\n          keyPath: leftOperands[i],\n          cond: operators[i],\n          value: rightOperands[i]\n        });\n      }\n\n      conditionsBlocksArray.push({\n        conditionsArray: conditionsArray,\n        internalLogOperator: logOperatorsType,\n        externalLogOperator: extLogOperator\n      });\n      conditionsArray = null;\n    } // end if else\n  },\n\n  testConditionBlock(cursor, conditionsArray, operator) {\n    let t = this;\n\n    let test = operator == 'and' || !operator ? true : false;\n    for (let i = 0; i < conditionsArray.length; i++) {\n      test = t.testCondition(\n        cursor.value[conditionsArray[i].keyPath],\n        conditionsArray[i].cond,\n        conditionsArray[i].value\n      );\n      if ((operator == 'and' || !operator) && !test) return false;\n      else if (operator == 'or' && test) return true;\n    }\n\n    return test;\n  },\n\n  testCondition(value1, condition, value2) {\n    let result;\n    switch (condition) {\n      case '=':\n        result = value1 == value2 ? true : false;\n        break;\n\n      case '>':\n        result = value1 > value2 ? true : false;\n        break;\n\n      case '<':\n        result = value1 < value2 ? true : false;\n        break;\n\n      case '>=':\n        result = value1 >= value2 ? true : false;\n        break;\n\n      case '<=':\n        result = value1 <= value2 ? true : false;\n        break;\n\n      case '!=':\n        result = value1 != value2 ? true : false;\n        break;\n\n      case '<>': // string value1 contains substring value2\n        if (typeof value1 != 'string') {\n          return false;\n        }\n        result = value1.indexOf(value2) != -1;\n        break;\n\n      case '^':\n        if (typeof value1 != 'string') {\n          return false;\n        }\n        result = value1.indexOf(value2) == 0;\n        break;\n\n      case '$':\n        if (typeof value1 != 'string') {\n          return false;\n        }\n        result = value1.indexOf(value2) == value1.length - value2.length;\n        break;\n\n      case '~~': //custom operator\n        try {\n          result = customOperator(value1, value2);\n        } catch (e) {\n          result = false;\n        }\n        break;\n\n      default:\n        break;\n    }\n    return result;\n  }\n};\n","import { logEnum, logger } from './index.js';\n\nlet idle = true;\nexport let tasks = [];\n\nexport function checkTasks() {\n  if (tasks.length == 0) {\n    idle = true;\n    logger('No pending tasks');\n    return;\n  }\n  idle = false;\n  let task = tasks[0];\n  if (!task.type) {\n    task.fn.apply(this, task.args);\n  } else {\n    logger('Custom task' + logEnum.begin);\n    task.fn.apply(task.context, task.args);\n    done();\n  }\n}\n\nexport function done() {\n  tasks.shift();\n  checkTasks();\n}\n\nexport function execTasks() {\n  if (idle) {\n    checkTasks();\n  }\n}\n","export const logEnum = {\n  begin: '//--------------------------------------->'\n};\n\nexport function logger(message, isError) {\n  if (consoleOff && !isError) return;\n\n  if (!isError) console.log(message);\n  else console.error(message);\n}\n","import {\n  _qrySys,\n  aggregateLog,\n  checkTasks,\n  countLog,\n  cursorAggregate,\n  cursorCount,\n  cursorDelRecords,\n  cursorGetRecords,\n  cursorLoop,\n  cursorUpdate,\n  db,\n  dbName,\n  done,\n  Index,\n  initCursorLoop,\n  isKey,\n  lastErrorObj,\n  logEnum,\n  logger,\n  makeErrorObject,\n  queryLog,\n  requestErrorAction,\n  requestSuccessAction,\n  setDb,\n  setSharedObj,\n  tasks,\n  tkOpen,\n  tryGetAll,\n  tryGetByKey,\n  tryOpenCursor,\n  voidFn,\n} from './index.js';\n\n//// Private variables //////////////////////////////\nlet _store;\nconst qrySys = _qrySys;\n\nfunction setStore(storeName, rwMode) {\n  _store = null;\n  let origin = 'initStore()';\n  try {\n    _store = db.transaction(storeName, rwMode).objectStore(storeName);\n  } catch (e) {\n    makeErrorObject(origin, e);\n    logger(lastErrorObj, true);\n  }\n  done();\n}\n\n// Puts setStore() in task queue\nfunction initStore(storeName, rwMode) {\n  let args = [storeName, rwMode];\n  let task = {\n    args: args,\n    fn: setStore\n  };\n\n  tasks.push(task);\n}\n\n//// Private functions //////////////////////////////\n\n// Creates a new index in the store\nfunction newIndex(\n  storeName,\n  indexName,\n  keyPath,\n  { unique, successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let version;\n  let origin = 'Store.newIndex()';\n  logger(origin + logEnum.begin);\n\n  //checks if index exists\n  let transaction = db.transaction(storeName);\n  if (transaction.objectStore(storeName).indexNames.contains(indexName)) {\n    console.log('activated');\n    requestSuccessAction(\n      null,\n      origin,\n      successCallback,\n      `The index \"${indexName}\" already exists in store \"${storeName}\"`\n    );\n    return;\n  }\n\n  //// Gets the new version\n  //\n  version = db.version;\n  db.close();\n  let newVersion = version + 1;\n\n  //// The change of the database schema only can be performed in the onupgradedneeded event\n  //// so a new version number is needed to trigger that event.\n  //\n  let request = window.indexedDB.open(dbName, newVersion);\n\n  request.onupgradeneeded = function (event) {\n    let _db = event.target.result;\n    setDb(_db);\n    let _store = null;\n\n    var upgradeTransaction = event.target.transaction;\n\n    //// Gets store\n    try {\n      _store = upgradeTransaction.objectStore(storeName);\n      _store.createIndex(indexName, keyPath);\n    } catch (e) {\n      requestErrorAction(origin, e, errorCallback);\n      return;\n    }\n  };\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `Index \"${indexName}\" created in store \"${storeName}\"`\n    );\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Adds one(A) or more(B) records to the store\nfunction addRecord(obj, { successCallback = voidFn, errorCallback = voidFn }) {\n  let origin = 'Store.add()';\n  logger(origin + logEnum.begin);\n  let args = { obj, origin, successCallback, errorCallback };\n\n  if (Array.isArray(obj)) {\n    addRecordA(args);\n  } else {\n    addRecordB(args);\n  }\n}\nfunction addRecordA({ obj, origin, successCallback, errorCallback }) {\n  let objSize = obj.length;\n  let counter = 0;\n\n  while (counter < objSize) {\n    let request = _store.add(obj[counter]);\n    counter++;\n    request.onerror = function () {\n      requestErrorAction(origin, request.error, errorCallback);\n    };\n  }\n  requestSuccessAction(\n    event,\n    origin,\n    successCallback,\n    `New record/s added to store \"${_store.name}\"`\n  );\n}\nfunction addRecordB({ obj, origin, successCallback, errorCallback }) {\n  let request = _store.add(obj);\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `New record/s added to store \"${_store.name}\"`\n    );\n  };\n\n  request.onerror = function (event) {\n    requestErrorAction(origin, event.target.error, errorCallback);\n  };\n}\n// Gets all records from a store\nfunction getAll(successCallback, errorCallback) {\n  let request = null;\n  let origin = 'Store.getAll()';\n  logger(origin + logEnum.begin);\n\n  /// Callbacks of request\n  let onsuccess = function (event) {\n    requestSuccessAction(\n      event.target.result,\n      origin,\n      successCallback,\n      `All records returned from store \"${_store.name}\"`\n    );\n  };\n  let onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n\n  /// Request definition\n  request = tryGetAll(origin, _store, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = onsuccess;\n  request.onerror = onerror;\n}\n// Gets records filtered by a query\nfunction get(query, successCallback, errorCallback) {\n  let origin = 'Store.get()';\n  logger(origin + logEnum.begin);\n  if (isKey(query)) {\n    getBykey(query, successCallback, errorCallback);\n    return;\n  }\n  let resultFiltered = [];\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  let obj = {\n    counter: 0,\n    source: _store.name,\n    extMode: extMode,\n    event: resultFiltered,\n    resultFiltered: resultFiltered,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: queryLog,\n    cursorFunction: cursorGetRecords,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  let request = tryOpenCursor(origin, _store, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Gets records with key as query\nfunction getBykey(query, successCallback, errorCallback) {\n  let origin = 'Store.getByKey()';\n  logger(origin + logEnum.begin);\n  let request;\n\n  let onsuccess = function (event) {\n    successCallback(event.target.result, origin, query);\n    db.close();\n    logger(`Records with key \"${query}\" returned from store \"${_store.name}\"`);\n    done();\n  };\n  let onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n\n  request = tryGetByKey(origin, _store, query, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = onsuccess;\n  request.onerror = onerror;\n}\n// Deletes one or more records using a query\nfunction del(query, successCallback, errorCallback) {\n  let origin = 'Store.del()';\n  logger(origin + logEnum.begin);\n\n  if (isKey(query)) {\n    delByKey(query, successCallback, errorCallback);\n    return;\n  }\n\n  let request = null;\n\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n\n  let obj = {\n    counter: 0,\n    extMode: extMode,\n    source: _store.name,\n    event: event,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: queryLog,\n    cursorFunction: cursorDelRecords,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  request = tryOpenCursor(origin, _store, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Deletes records using primary key as query. Is more fast.\nfunction delByKey(query, successCallback, errorCallback) {\n  let origin = 'Store.delByKey()';\n  logger(origin + logEnum.begin);\n\n  let request = _store.delete(query);\n\n  request.onsuccess = function (event) {\n    successCallback(event, origin, query);\n    db.close();\n    logger(`Records with primary key \"${query}\" deleted from store \"${_store.name}\"`);\n    done();\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Counts records filtered by a query\nfunction count(query, successCallback, errorCallback) {\n  let origin = 'Store.count()';\n  logger(origin + logEnum.begin);\n\n  if (!query) {\n    countAll(successCallback, errorCallback);\n    return;\n  }\n\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  /// Object used by cursorLoop()\n  let obj = {\n    counter: 0,\n    get event() {\n      return this.counter;\n    },\n    source: _store.name,\n    extMode: extMode,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: countLog,\n    cursorFunction: cursorCount,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  initCursorLoop(_store, errorCallback);\n}\n// Counts all records in the store\nfunction countAll(successCallback, errorCallback) {\n  let origin = 'Store.countAll()';\n  logger(origin + logEnum.begin);\n  let request = _store.count();\n\n  request.onsuccess = function (event) {\n    let message = `${event.target.result} records in store \"${_store.name}\"`;\n    requestSuccessAction(event.target.result, origin, successCallback, message);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\nfunction checkIndex(indexName, callback) {\n  let origin = 'Store.checkIndex()';\n  logger(origin + logEnum.begin);\n  let exists = _store.indexNames.contains(indexName);\n  let message = `Index \"${indexName}\" check result -> ${exists}`;\n  db.close();\n  callback(exists, origin);\n  logger(message);\n  done();\n}\n\n// Deletes an index\nfunction delIndex(storeName, indexName, successCallback, errorCallback) {\n  let version;\n  let origin = 'Store.delIndex()';\n  logger(origin + logEnum.begin);\n\n  //// Gets the new version\n  //\n  version = db.version;\n  db.close();\n  let newVersion = version + 1;\n\n  //// The change of the database schema only can be performed in the onupgradedneeded event\n  //// so a new version number is needed to trigger that event.\n  //\n  let request = window.indexedDB.open(dbName, newVersion);\n\n  request.onupgradeneeded = function (event) {\n    let _db = event.target.result;\n    setDb(_db);\n    let _store = null;\n\n    let upgradeTransaction = event.target.transaction;\n\n    //// Gets store\n    try {\n      _store = upgradeTransaction.objectStore(storeName);\n    } catch (e) {\n      requestErrorAction(origin, e, errorCallback);\n      return;\n    }\n\n    _store.deleteIndex(indexName);\n  };\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `Index \"${indexName}\" deleted from object store \"${storeName}\"`\n    );\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Apply a function (aggregatefn) to the values of a property.\nfunction getaggregateFunction(\n  property,\n  aggregatefn,\n  successCallback = voidFn,\n  origin,\n  { query, errorCallback = voidFn }\n) {\n  logger(origin + logEnum.begin);\n\n  var commonArgs = {\n    origin: origin,\n    property: property,\n    aggregatefn: aggregatefn,\n    successCallback: successCallback,\n    errorCallback: errorCallback\n  };\n\n  if (!query) getaggregateFunctionA(commonArgs);\n  else getAggregateFunctionB(query, commonArgs);\n}\nfunction getaggregateFunctionA({\n  origin,\n  property,\n  aggregatefn,\n  successCallback,\n  errorCallback\n}) {\n  let actualValue = null;\n  let counter = 0;\n\n  let request = tryOpenCursor(origin, _store, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n\n    if (cursor) {\n      if (cursor.value[property]) {\n        counter++;\n        actualValue = aggregatefn(actualValue, cursor.value[property], counter);\n      }\n      cursor.continue();\n    } else {\n      successCallback(actualValue, origin);\n      db.close();\n      logger(`Result of ${origin} on property \"${property}\": ${actualValue}`);\n      done();\n    }\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\nfunction getAggregateFunctionB(\n  query,\n  { origin, property, aggregatefn, successCallback, errorCallback }\n) {\n  if (isKey(query)) {\n    query = _store.keyPath + '=' + query;\n  }\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  let obj = {\n    counter: 0,\n    actualValue: null,\n    get event() {\n      return this.actualValue;\n    },\n    property: property,\n    aggregatefn: aggregatefn,\n    extMode: extMode,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: aggregateLog,\n    cursorFunction: cursorAggregate,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  /// request definition\n  let request = tryOpenCursor(origin, _store, errorCallback); //store.openCursor();\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n// Adds getaggregateFunction() to the task queue\nfunction makeAggregateTask({\n  property,\n  successCallback,\n  aggregatefn,\n  origin,\n  query,\n  errorCallback\n}) {\n  let options = {\n    query: query,\n    errorCallback: errorCallback\n  };\n\n  let args = [property, aggregatefn, successCallback, origin, options];\n\n  tasks.push({ args: args, fn: getaggregateFunction });\n}\n// Updates one or more records\nfunction update(query, objectValues, { successCallback, errorCallback }) {\n  let origin = 'Store.update()';\n  logger(origin + logEnum.begin);\n\n  //// Gets isIndexKeyValue\n  //// If true then is query is a single value (an index key)\n  let isIndexKeyValue = isKey(query);\n\n  if (isIndexKeyValue) {\n    // If query is a single number value then is mofied to be valid to the query system\n    query = _store.keyPath + '=' + query;\n  }\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n\n  var extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  var exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n\n  let obj = {\n    counter: 0,\n    keys: Object.keys(objectValues),\n    newObjectValuesSize: Object.keys(objectValues).length,\n    extMode: extMode,\n    source: _store.name,\n    objectValues: objectValues,\n    event: event,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: queryLog,\n    cursorFunction: cursorUpdate,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  initCursorLoop(_store, errorCallback);\n}\n\nfunction clear({ successCallback, errorCallback }) {\n  let origin = 'Store.clear()';\n  logger(origin + logEnum.begin);\n\n  let request = null;\n  try {\n    request = _store.clear();\n  } catch (e) {\n    requestErrorAction(origin, request.error, errorCallback);\n    return;\n  }\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event.target.result,\n      origin,\n      successCallback,\n      `Store \"${_store.name}\" cleared.`\n    );\n  };\n\n  request.onerror = function (event) {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\nfunction initTasks(storeName, rwMode, task) {\n  tasks.push(tkOpen);\n  initStore(storeName, rwMode);\n  tasks.push(task);\n}\n\n/**\n * Constructs a Sixdb Store instance. This constructor is used via Sixdb.openStore() method.\n * @class\n * @param  {string} storeName Name of the object store\n * @return {object}\n */\nexport let Store = function (storeName) {\n  //// Private properties ////////////////////////////\n  let _storeName = storeName;\n\n  /**\n * Gets the name of the store.\n * @method Store#name\n * @return  {string} Name of the store.\n */\n  this.name = function () {\n    return _storeName;\n  };\n\n  //// Public Methods///////////////////\n  /*\n  this.newIndex;\n  this.openIndex;\n  this.delIndex;\n  this.add;\n  this.getAll;\n  this.get;\n  this.del;\n  this.count;\n  this.aggregateFn;\n  this.update;\n  this.clear;\n  */\n};\n\n/**\n * Creates a new index in the object store.\n * @method Store#newIndex\n * @instance\n * @param  {string} indexName Name of the new index.\n * @param  {string} keyPath Name of the property used as key.\n * @param  {object} [options]\n * @param  {boolean} [options.unique] If true, the index will not allow duplicate values for a single key.\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nStore.prototype.newIndex = function (\n  indexName,\n  keyPath,\n  { unique, successCallback, errorCallback } = {}\n) {\n  let args = [\n    this.name(),\n    indexName,\n    keyPath,\n    {\n      unique: unique,\n      successCallback: successCallback,\n      errorCallback: errorCallback\n    }\n  ];\n  let task = {\n    args: args,\n    fn: newIndex\n  };\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\nStore.prototype.openIndex = function (indexName) {\n  return new Index(this.name(), indexName);\n};\n\n/**\n * Adds one or more records to the object store.\n * @method Store#add\n * @instance\n * @param  {object | object[]} obj A single object or an array of objects wich represents the records.\n * @param  {object} [options]\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * var mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * var store = mydb.openStore('southFactory');\n *\n * // Object to insert in the object store\n * //\n * var person = {\n *     name: 'Peter',\n *     age: 32\n * }\n *\n * // Callback function to process a possible error\n * //\n * var myErrorCallback = function(e){\n *     console.log(e);\n * }\n *\n *\n * //\n * // Inserts a new record in the object store.\n * //\n * store.add( person, { errorCallback: myErrorCallback });\n *\n *\n * // Execs all pending tasks.\n * //\n * mydb.execTasks();\n */\nStore.prototype.add = function (obj, { successCallback, errorCallback } = {}) {\n  let args = [obj, { successCallback, errorCallback }];\n  let task = { args: args, fn: addRecord };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n\nStore.prototype.checkIndex = function (indexName, callback) {\n  let args = [indexName, callback];\n  let task = { args: args, fn: checkIndex };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n\n/**\n * Gets all records from the object store.\n * @method Store#getAll\n * @instance\n * @param  {function} successCallback Function called on success. Receives event and origin as parameters.\n * @param  {function} [errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n *\n *\n * //\n * // Callback function to process the result\n * //\n * const myCallback = function(result){\n *\n *     if(Array.isArray(result)){\n *         for(let i = 0, j = result.length; i < j; i++)\n *         console.log(`Name: ${result[i].name} Age: ${result[i].age} Salary: ${result[i].salary}\\n`);\n *     } else {\n *         console.log(`Name: ${result.name} Age: ${result.age} Salary:{result.salary}`);\n *     }\n * };\n *\n *\n * //\n * // Gets all records from the store \"southFactory\"\n * //\n * store.getAll(myCallback);\n *  \n *\n *\n * // Execs all pending tasks\n * mydb.execTasks();\n*/\nStore.prototype.getAll = function (successCallback, errorCallback = voidFn) {\n  let args = [successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: getAll\n  };\n\n  initTasks(this.name(), 'readonly', task);\n};\n\n/**\n * Gets one or more records from store using a query.\n * @method Store#get\n * @instance\n * @param  {query} query The query to select the records.\n * @param  {function} successCallback Function called on success. Receives event and origin as parameters.\n * @param  {function} [errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Gets all records with salary > 1200 and age < 40\n * //\n * store.get('salary > 1200 & age < 40', mySuccesCallback);\n * \n * mydb.execTasks();\n * \n */\nStore.prototype.get = function (query, successCallback, errorCallback = voidFn) {\n  let args = [query, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: get\n  };\n\n  initTasks(this.name(), 'readonly', task);\n};\n\n/**\n * Deletes one or more records from the store using a query.\n * @method Store#del\n * @instance\n * @param  {query} query \n * @param  {object} [options]\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nStore.prototype.del = function (\n  query,\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let args = [query, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: del\n  };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n\n/**\n * Counts the records in the store.\n * @method Store#count\n * @instance\n * @param  {function} successCallback Function called on success. Receives result (number), origin and query as parameters.\n * @param  {object} [options] \n * @param  {query} [options.query] The query used to select the records to count.Array\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nStore.prototype.count = function (\n  successCallback,\n  { query, errorCallback = voidFn } = {}\n) {\n  var args = [query, successCallback, errorCallback];\n  var task = {\n    args: args,\n    fn: count\n  };\n\n  initTasks(this.name(), 'readonly', task);\n};\n\n/**\n * Deletes an Index from the store.\n * @method Store#delIndex\n * @instance\n * @param  {string} indexName Name of the index.\n * @param  {object} [options] \n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nStore.prototype.delIndex = function (\n  indexName,\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let args = [this.name(), indexName, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: delIndex\n  };\n\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\n/**\n * Iterates the store by applying a function to each record in a specified property.\n * @method Store#aggregateFn\n * @instance\n * @param  {string} property Represents the column to apply the aggregate function.\n * @param  {aggregateFunction} aggregatefn Function applied over the records. \n * @param  {function} successCallback Function called on success. Receives result, origin and query as parameters.\n * @param  {object} [options]\n * @param  {query} [options.query] The query used to select records.errorCallback.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Sends to mySuccesCallback the average age of employees with salary highter than 1500\n * //\n * store.aggregateFn('age', mydb.aggregateFuncs.avg, mySuccesCallback, {query: 'salary > 1500'});\n * \n * mydb.execTasks();\n */\nStore.prototype.aggregateFn = function (\n  property,\n  aggregatefn,\n  successCallback,\n  { query, errorCallback } = {}\n) {\n  var origin = 'Store.aggregateFn()';\n  var args = {\n    property: property,\n    successCallback: successCallback,\n    aggregatefn: aggregatefn,\n    origin: origin,\n    query: query,\n    errorCallback: errorCallback\n  };\n\n  tasks.push(tkOpen);\n  initStore(this.name(), 'readonly');\n  makeAggregateTask(args);\n};\n\n/**\n * Updates one or more records in the store.\n * @method Store#update\n * @instance\n * @param  {query} query The query used to select the records to update.\n * @param  {object} objectValues Object wich contains the properties with the new values.<br>\n * Example: {property1: newValue1, property4: newValue4}<br>\n * The value can be a function that receives the old value and returns a new value:<br>\n * Example: {property2: function(oldValue){return oldValue + 100;}}\n * @param  {object} [options]\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Updates salary of record with primary key 4 (only in the case that object store has autoincrement primary key)\n * //\n * store.update(4, {salary: 1200});\n * \n * // Updates salary and age of Peter\n * //\n * store.update('name = Peter', {age: 33, salary: 1150});\n * \n * // Increases salary of employees with age > 40 by 100 using a function\n * //\n * store.update(\n *     'age > 40', \n *     {\n *         salary: function(oldSalary){ return oldSalary + 100;} \n *     }\n * );\n * \n * mydb.execTasks();\n */\nStore.prototype.update = function (\n  query,\n  objectValues,\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let options = { successCallback, errorCallback };\n  let args = [query, objectValues, options];\n  let task = {\n    args: args,\n    fn: update\n  };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n\n/**\n * Deletes all records in the object store.\n * @method Store#clear\n * @instance\n * @param  {object} options\n * @param  {function} [options.successCallback] Function called on success. Receives event and origin as parameters.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument. \n * @return {void}\n */\nStore.prototype.clear = function ({ successCallback = voidFn, errorCallback = voidFn }) {\n  let options = { successCallback, errorCallback };\n  let args = [options];\n  let task = {\n    args: args,\n    fn: clear\n  };\n\n  initTasks(this.name(), 'readwrite', task);\n};\n","import {\n  _qrySys,\n  aggregateLog,\n  checkTasks,\n  countLog,\n  cursorAggregate,\n  cursorCount,\n  cursorGetRecords,\n  cursorLoop,\n  db,\n  done,\n  initCursorLoop,\n  isKey,\n  lastErrorObj,\n  logEnum,\n  logger,\n  makeErrorObject,\n  queryLog,\n  requestErrorAction,\n  requestSuccessAction,\n  setSharedObj,\n  tasks,\n  tkOpen,\n  tryGetAll,\n  tryGetByKey,\n  tryOpenCursor,\n  voidFn,\n} from './index.js';\n\n//// Private variables //////////////////////////////\nlet _index = null;\nlet qrySys = _qrySys;\n\nfunction setIndex(storeName, indexName, rwMode) {\n  _index = null;\n  let origin = 'initIndex()';\n  try {\n    let objectStore = db.transaction(storeName, rwMode).objectStore(storeName);\n    _index = objectStore.index(indexName);\n  } catch (e) {\n    makeErrorObject(origin, e);\n    logger(lastErrorObj, true);\n  }\n  done();\n}\n\n// Adds setIndex to the task queue\nfunction initIndex(storeName, indexName, rwMode) {\n  let args = [storeName, indexName, rwMode];\n  let task = {\n    args: args,\n    fn: setIndex\n  };\n\n  tasks.push(task);\n}\n\n// Gets all records from a store\nfunction getAll(successCallback, errorCallback) {\n  let origin = 'Index.getAll()';\n  logger(origin + logEnum.begin);\n\n  let request = tryGetAll(origin, _index, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event.target.result,\n      origin,\n      successCallback,\n      `All records returned from index \"${_index.name}\"`\n    );\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Gets records filtered by a query\nfunction get(query, successCallback, errorCallback) {\n  let origin = 'Index.get()';\n  logger(origin + logEnum.begin);\n  if (isKey(query)) {\n    getBykey(query, successCallback, errorCallback);\n    return;\n  }\n  let resultFiltered = [];\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  let obj = {\n    counter: 0,\n    source: _index.name,\n    extMode: extMode,\n    event: resultFiltered,\n    resultFiltered: resultFiltered,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: queryLog,\n    cursorFunction: cursorGetRecords,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  let request = tryOpenCursor(origin, _index, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Gets records with key as query\nfunction getBykey(query, successCallback, errorCallback) {\n  let origin = 'Index.getByKey()';\n  logger(origin + logEnum.begin);\n\n  let request = tryGetByKey(origin, _index, query, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    successCallback(event.target.result, origin, query);\n    db.close();\n    logger(`Records with key \"${query}\" returned from index \"${_index.name}\"`);\n    done();\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Counts records filtered by a query\nfunction count(query, successCallback, errorCallback) {\n  let origin = 'Index.count()';\n  logger(origin + logEnum.begin);\n\n  if (!query) {\n    countAll(successCallback, errorCallback);\n    return;\n  }\n\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  /// Object used by cursorLoop()\n  let obj = {\n    counter: 0,\n    get event() {\n      return this.counter;\n    },\n    source: _index.name,\n    extMode: extMode,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: countLog,\n    cursorFunction: cursorCount,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  initCursorLoop(_index, errorCallback);\n}\n\n// Counts all records in the index\nfunction countAll(successCallback, errorCallback) {\n  let origin = 'Index.countAll()';\n  logger(origin + logEnum.begin);\n  let request = _index.count();\n\n  request.onsuccess = function (event) {\n    let message = `${event.target.result} records in index \"${_index.name}\"`;\n    requestSuccessAction(event.target.result, origin, successCallback, message);\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Apply a function (aggregatefn) to the values of a property.\nfunction getaggregateFunction(\n  property,\n  aggregatefn,\n  successCallback = voidFn,\n  origin,\n  { query, errorCallback = voidFn }\n) {\n  logger(origin + logEnum.begin);\n\n  var commonArgs = {\n    origin: origin,\n    property: property,\n    aggregatefn: aggregatefn,\n    successCallback: successCallback,\n    errorCallback: errorCallback\n  };\n\n  if (!query) getaggregateFunctionA(commonArgs);\n  else getAggregateFunctionB(query, commonArgs);\n}\nfunction getaggregateFunctionA({\n  origin,\n  property,\n  aggregatefn,\n  successCallback,\n  errorCallback\n}) {\n  let actualValue = null;\n  let counter = 0;\n\n  let request = tryOpenCursor(origin, _index, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n\n    if (cursor) {\n      if (cursor.value[property]) {\n        counter++;\n        actualValue = aggregatefn(actualValue, cursor.value[property], counter);\n      }\n      cursor.continue();\n    } else {\n      successCallback(actualValue, origin);\n      db.close();\n      logger(`Result of ${origin} on property \"${property}\": ${actualValue}`);\n      done();\n    }\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\nfunction getAggregateFunctionB(\n  query,\n  { origin, property, aggregatefn, successCallback, errorCallback }\n) {\n  if (isKey(query)) {\n    query = _index.keyPath + '=' + query;\n  }\n  let conditionsBlocksArray = qrySys.makeConditionsBlocksArray(query);\n  let extMode = conditionsBlocksArray\n    ? conditionsBlocksArray[0].externalLogOperator\n    : null;\n  let exitsInFirstTrue = extMode == null || extMode == 'and' ? false : true;\n  let obj = {\n    counter: 0,\n    actualValue: null,\n    get event() {\n      return this.actualValue;\n    },\n    property: property,\n    aggregatefn: aggregatefn,\n    extMode: extMode,\n    origin: origin,\n    query: query,\n    conditionsBlocksArray: conditionsBlocksArray,\n    exitsInFirstTrue: exitsInFirstTrue,\n    logFunction: aggregateLog,\n    cursorFunction: cursorAggregate,\n    successCallback: successCallback\n  };\n\n  setSharedObj(obj);\n\n  /// request definition\n  let request = tryOpenCursor(origin, _index, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\n// Adds getaggregateFunction() to the task queue\nfunction makeAggregateTask({\n  property,\n  successCallback,\n  aggregatefn,\n  origin,\n  query,\n  errorCallback\n}) {\n  let options = {\n    query: query,\n    errorCallback: errorCallback\n  };\n\n  let args = [property, aggregatefn, successCallback, origin, options];\n\n  tasks.push({ args: args, fn: getaggregateFunction });\n}\n\nfunction initTasks(storeName, indexName, task) {\n  tasks.push(tkOpen);\n  initIndex(storeName, indexName, 'readonly');\n  tasks.push(task);\n}\n\n/**\n * Constructs a Sixdb Index instance. This constructor is used via Store.openStore() method.\n * @class\n * @param  {string} storeName Name of the parent store.\n * @param  {string} indexName Name of the index.\n * @return {object}\n */\nexport let Index = function (storeName, indexName) {\n  let _indexName = indexName;\n  let _storeName = storeName;\n\n  /**\n   * Gets the name of the index.\n   * @method Index#name\n   * @return  {string} Name of the index.\n   */\n  this.name = function () {\n    return _indexName;\n  };\n\n  /**\n   * Gets the name of the parent store.\n   * @method Index#storeName\n   * @return  {string} Name of the parent store.\n   */\n  this.storeName = function () {\n    return _storeName;\n  };\n\n  //// Public methods /////////////////////////////////////\n  /*\n  this.getAll;\n  this.get;\n  this.count;\n  this.aggregateFn;\n  */\n};\n\n/**\n * Gets all records from the index.\n * @method Index#getAll\n * @instance\n * @param  {function} successCallback Function called on success. Receives event and origin as parameters.\n * @param  {function} [errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Instantiates the index \"Names\"\n * //\n * let index = store.openIndex('Names');\n * \n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n *\n *\n * //\n * // Callback function to process the result\n * //\n * const myCallback = function(result){\n *\n *     if(Array.isArray(result)){\n *         for(let i = 0, j = result.length; i < j; i++)\n *         console.log(`Name: ${result[i].name} Age: ${result[i].age} Salary: ${result[i].salary}\\n`);\n *     } else {\n *         console.log(`Name: ${result.name} Age: ${result.age} Salary:{result.salary}`);\n *     }\n * };\n *\n *\n * //\n * // Gets all records from the index \"Names\" in store \"southFactory\"\n * //\n * index.getAll(myCallback);\n *  \n *\n *\n * // Execs all pending tasks\n * mydb.execTasks();\n*/\nIndex.prototype.getAll = function (successCallback, errorCallback = voidFn) {\n  let args = [successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: getAll\n  };\n\n  initTasks(this.storeName(), this.name(), task);\n};\n\n/**\n * Gets one or more records from an index using a query.\n * @method Index#get\n * @instance\n * @param  {query} query The query to select the records.\n * @param  {function} successCallback Function called on success. Receives event and origin as parameters.\n * @param  {function} [errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Instantiates the index \"Names\"\n * //\n * let index = store.openIndex('Names');\n * \n * // Gets all records with salary > 1200 and age < 40 in index \"Names\"\n * //\n * index.get('salary > 1200 & age < 40', mySuccesCallback);\n * \n * mydb.execTasks();\n * \n */\nIndex.prototype.get = function (query, successCallback, errorCallback = voidFn) {\n  let args = [query, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: get\n  };\n\n  initTasks(this.storeName(), this.name(), task);\n};\n\n/**\n * Counts the records in an index.\n * @method Index#count\n * @instance\n * @param  {function} successCallback Function called on success. Receives result (number), origin and query as parameters.\n * @param  {object} [options] \n * @param  {query} [options.query] The query used to select the records to count.Array\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n */\nIndex.prototype.count = function (\n  successCallback,\n  { query, errorCallback = voidFn } = {}\n) {\n  let args = [query, successCallback, errorCallback];\n  let task = {\n    args: args,\n    fn: count\n  };\n\n  initTasks(this.storeName(), this.name(), task);\n};\n\n/**\n * Iterates the index by applying a function to each record in a specified property.\n * @method Index#aggregateFn\n * @instance\n * @param  {string} property Represents the column to apply the aggregate function.\n * @param  {aggregateFunction} aggregatefn Function applied over the records. \n * @param  {function} successCallback Function called on success. Receives result, origin and query as parameters.\n * @param  {object} [options]\n * @param  {query} [options.query] The query used to select records.errorCallback.\n * @param  {function} [options.errorCallback] Function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in the object store\n * //\n * let person = {\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * // Instantiates the store \"southFactory\"\n * //\n * let store = mydb.openStore('southFactory');\n * \n * // Instantiates the index \"Names\"\n * //\n * let index = store.openIndex('Names');\n * \n * // Sends to mySuccesCallback the average age of employees with salary highter than 1500\n * //\n * index.aggregateFn('age', mydb.aggregateFuncs.avg, mySuccesCallback, {query: 'salary > 1500'});\n * \n * mydb.execTasks();\n */\nIndex.prototype.aggregateFn = function (\n  property,\n  aggregatefn,\n  successCallback,\n  { query, errorCallback } = {}\n) {\n  let origin = 'Index.aggregateFn()';\n  let args = {\n    property: property,\n    successCallback: successCallback,\n    aggregatefn: aggregatefn,\n    origin: origin,\n    query: query,\n    errorCallback: errorCallback\n  };\n\n  tasks.push(tkOpen);\n  initIndex(this.storeName(), this.name(), 'readonly');\n  makeAggregateTask(args);\n};\n","export let lastErrorObj = {};\n\nexport function makeErrorObject(origin, domException) {\n  let errorObj = {};\n  if (domException) {\n    errorObj.type = domException.name;\n    errorObj.origin = origin;\n    errorObj.description = domException.message;\n  }\n\n  lastErrorObj = errorObj;\n\n  return true;\n}\n","/**\n * @author       Juan Jose Capellan <soycape@hotmail.com>\n * @copyright    2018 Juan Jose Capellan\n * @license      {@link https://github.com/jjcapellan/SIXDB/blob/master/LICENSE | MIT license}\n */\n\nimport {\n  _qrySys,\n  done,\n  execTasks,\n  logEnum,\n  logger,\n  requestErrorAction,\n  requestSuccessAction,\n  Store,\n  tasks,\n} from './index.js';\n\n\nlet db = null;\nlet dbName;\nconst voidFn = function () {\n  return 0;\n};\n\n// Opens the database and stores the result in db\nfunction openDb() {\n  let request = window.indexedDB.open(dbName);\n\n  request.onerror = function () {\n    alert('Error. You must allow web app to use indexedDB.');\n  };\n\n  request.onsuccess = function (event) {\n    db = event.target.result;\n    done();\n  };\n}\n\n// Predefined task to open the actual database\nconst tkOpen = { args: null, fn: openDb };\n\n// Allows other modules modify variable db\nfunction setDb(_db) {\n  db = _db;\n}\n\nfunction checkStore(storeName, callback) {\n  let origin = 'Sixdb.checkStore()';\n  logger(origin + logEnum.begin);\n  let exists = db.objectStoreNames.contains(storeName);\n  db.close();\n  callback(exists, origin);\n  done();\n  return;\n}\n\n// Creates a store in the database\nfunction newStore(\n  storeName,\n  { keyPath, autoIncrement, successCallback, errorCallback } = {}\n) {\n  let version;\n  let origin = 'Sixdb.newStore()';\n  logger(origin + logEnum.begin);\n\n  // If store already exist then returns\n  if (db.objectStoreNames.contains(storeName)) {\n    db.close();\n    logger(`Object store \"${storeName}\" already exists`);\n    done();\n    return;\n  }\n\n  version = db.version;\n  db.close();\n  let newVersion = version + 1;\n  let _store;\n\n  let request = window.indexedDB.open(dbName, newVersion);\n\n  request.onupgradeneeded = function (event) {\n    db = event.target.result;\n\n    try {\n      _store = db.createObjectStore(storeName, {\n        keyPath: keyPath,\n        autoIncrement: autoIncrement\n      });\n    } catch (e) {\n      requestErrorAction(origin, e, errorCallback);\n      return;\n    }\n\n    _store.onerror = function (event) {\n      requestErrorAction(origin, event.target.error, errorCallback);\n    };\n  };\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `New object store \"${storeName}\" created`\n    );\n  };\n}\n\nfunction delStore(storeName, { successCallback, errorCallback }) {\n  let origin = 'Sixdb.delStore()';\n  logger(origin + logEnum.begin);\n\n  //// Gets the new version\n  //\n  let version = db.version;\n  db.close();\n  let newVersion = version + 1;\n\n  //// The change of the database schema only can be performed in the onupgradedneeded event\n  //// so a new version number is needed to trigger that event.\n  //\n  let request = window.indexedDB.open(dbName, newVersion);\n\n  request.onupgradeneeded = function (event) {\n    db = event.target.result;\n    db.deleteObjectStore(storeName);\n  };\n\n  request.onsuccess = function (event) {\n    requestSuccessAction(\n      event,\n      origin,\n      successCallback,\n      `Object store \"${storeName}\" deleted`\n    );\n  };\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n\nfunction delDB({ successCallback, errorCallback }) {\n  let origin = 'Sixdb.destroy()';\n  logger(origin + logEnum.begin);\n\n  let request = window.indexedDB.deleteDatabase(dbName);\n\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n\n  request.onsuccess = function (event) {\n    successCallback(event, origin);\n    logger(`Database \"${dbName}\" deleted`);\n    done();\n  };\n}\n\n// Join operation. (ON store1.primaryKey = store2.index.keyPath)\nfunction join({ store1Name, store2Name, indexName, succesCallback, errorCallback }) {\n  let joinResult = [];\n  let store1Result = [];\n  let store2Result = [];\n  let origin = 'getJoin()';\n  logger(origin + logEnum.begin);\n  let transaction = db.transaction([store1Name, store2Name]);\n  let indexKeyPath;\n  let posCursor1 = 0;\n  let posCursor2 = 0;\n  let store1ResultLength;\n  let store2ResultLength;\n\n  let store1 = transaction.objectStore(store1Name);\n  let store1KeyPath = store1.keyPath;\n  store1.getAll().onsuccess = function (event) {\n    store1Result = event.target.result;\n    store1ResultLength = store1Result.length;\n\n    let store2 = transaction.objectStore(store2Name);\n    let store2Index = store2.index(indexName);\n    store2Index.getAll().onsuccess = function (event) {\n      store2Result = event.target.result;\n      store2ResultLength = store2Result.length;\n      console.log(store2ResultLength);\n      indexKeyPath = store2Index.keyPath;\n      makeJoinResult();\n    };\n  };\n\n  function makeJoinResult() {\n    if (\n      store1Result[posCursor1][store1KeyPath] == store2Result[posCursor2][indexKeyPath]\n    ) {\n      joinResult.push(Object.assign(store2Result[posCursor2], store1Result[posCursor1]));\n      posCursor2++;\n    } else {\n      posCursor1++;\n    }\n\n    if (posCursor1 == store1ResultLength || posCursor2 == store2ResultLength) {\n      requestSuccessAction(\n        joinResult,\n        origin,\n        successCallback,\n        'Join operation completed'\n      );\n    } else {\n      makeJoinResult();\n    }\n  }\n}\n\n/**\n * Constructs a Sixdb instance.\n * @class\n * @param  {string} _dbName Name of the database \n */\nwindow.Sixdb = function (_dbName) {\n  dbName = _dbName;\n\n  // Query system from qrySys.js\n  let qrySys = _qrySys;\n\n  // Creates or opens the database\n  function newDB(errorCallback = voidFn) {\n    let request = window.indexedDB.open(dbName);\n    let origin = 'Sixdb.newDB()';\n    logger(origin + logEnum.begin);\n\n    // Boolean: Database doesn't exist\n    let noDb = false;\n\n    // if onupgradeneeded means is a new database\n    request.onupgradeneeded = function () {\n      noDb = true;\n    };\n\n    request.onsuccess = function (event) {\n      let db = event.target.result;\n      db.close();\n      if (noDb) {\n        logger(`Database \"${dbName}\" created`);\n      } else {\n        logger(`Database \"${dbName}\" already exists`);\n      }\n      done();\n    };\n  }\n\n  // Adds newDB function to the task queue\n  function addDB(errorCallback) {\n    let args = [errorCallback];\n    let task = {\n      args: args,\n      fn: newDB\n    };\n    tasks.push(task);\n  }\n\n  //// public functions declaration /////////////////\n  this.name;\n  this.setConsoleOff;\n  this.customTask;\n  this.aggregateFuncs;\n  this.execTasks;\n  this.setCustomOperator;\n  this.checkStore;\n  this.newStore;\n  this.openStore;\n  this.delStore;\n  this.destroy;\n\n  //// Initialization ///////////////////////////////\n  qrySys.init();\n  addDB();\n  execTasks();\n};\n\n/**\n * Gets the database name.\n * @method window.Sixdb#name\n * @instance\n * @return Name of the database\n */\nSixdb.prototype.name = function () {\n  return dbName;\n};\n\n/**\n * Sets the consoleOff value.\n * @param  {boolean} _consoleOff If true, the console output is off and only errors appear in console.\n */\nSixdb.prototype.setConsoleOff = function (_consoleOff) {\n  consoleOff = _consoleOff;\n};\n\n/**\n * Add a specific function to the Sixdb task queue.\n * @method window.Sixdb#customTask\n * @instance\n * @param  {function} fn Our custom function that we want to add to the task queue.\n * @param  {object} context Usually the keyword \"this\"\n * @param  {...any} args Arguments for the function.\n * @example\n * var mydb = new Sixdb('companyDB');\n * \n * // Creates new store\n * mydb.newStore('southFactory');\n * \n * // Opens the store in a variable\n * var store = mydb.openStore('southFactory');\n *\n *\n * // Inserts one record in \"southFactory\" object store.\n * //\n * store.add(\n *    {ID: 1, name: 'Peter', department: 'manufacturing', age: 32, salary: 1200}\n * );\n *\n *\n * //\n * // To add an own function to the task queue, the method  customTask() of the Sixdb object is used\n * //\n * //     customTask( fn, context, args)\n * //\n * // This task is executed after the previous insertion task and before the next reading task.\n * //\n * mydb.customTask(\n *    function(m){                                // Custom function\n *        alert(m);\n *    },\n *    this,                                       // Context. Usually \"this\".\n *    'Inserting operation finished !!'           // Arguments of the function. Can be a variable number of arguments.\n * );\n *\n *\n *\n * // Reads all records from \"southFactory\" object store.\n * //\n * store.getAll(mySuccessCallback);\n *\n *\n * // ***** VERY IMPORTANT ****\n * // Once we have introduced the operations that we want to perform on the database,\n * // we must use the function execTasks() to execute them.\n * //\n * mydb.execTasks();\n */\nSixdb.prototype.customTask = function (fn, context, args) {\n  let argsArray = [];\n  if (args) {\n    for (let i = 2, j = arguments.length; i < j; i++) {\n      argsArray[2 - i] = arguments[i];\n    }\n  }\n  let task = { type: 'custom', fn: fn, context: context, args: argsArray };\n\n  tasks.push(task);\n};\n/** \n * Contains predefined aggregate functions to use in aggregateFn method.<br>\n * The method aggregateFn accepts too custom functions.\n * \n * @memberof window.Sixdb\n * @namespace\n*/\nSixdb.prototype.aggregateFuncs = {\n  /**\n   * Sums two values\n   * @param  {string | number} actual Acumulated value\n   * @param  {string | number} selected Selected value\n   * @return {string | number} Returns the sum.\n   */\n  sum(actual, selected) {\n    return actual + selected;\n  },\n\n  /**\n   * Calculates the average value.\n   * @param  {number} actual Acumulated value.\n   * @param  {number} selected Selected value.\n   * @param  {number} counter Number of elements.\n   * @return {number} average value.\n   */\n  avg(actual, selected, counter) {\n    return (actual * (counter - 1) + selected) / counter;\n  },\n\n  /**\n   * Returns the maximum value.\n   * @param  {string | number} actual \n   * @param  {string | number} selected \n   * @return {string | number} The maximum value.\n   */\n  max(actual, selected) {\n    return selected > actual ? selected : actual;\n  },\n\n  /**\n   * Returns the minimum value.\n   * @param  {string | number} actual \n   * @param  {string | number} selected \n   * @param  {number} counter Number of iteration.\n   * @return {string | number} The minimum value.\n   */\n  min(actual, selected, counter) {\n    if (counter == 1) {\n      // First value of actual is null. Without this, min is allways null\n      actual = selected;\n    }\n    return selected < actual && counter > 1 ? selected : actual;\n  }\n};\n\n/**\n   * Sets customOperator. To make the queries we can add to the Sixdb comparison operators our own operator.<br>\n   * This operator will be represented by <b>~~</b>.\n   * @method window.Sixdb#setCustomOperator\n   * @instance\n   * @param  {function} compareFunction Function to compare a property value with a test value.<br>\n   * @example\n   * var mydb = new Sixdb('myDatabase');\n   *\n   * //\n   * // The compare function must have two arguments, property value and test value. If this function triggers\n   * // an error exception, then the query system returns the condition as false.\n   * //\n   * mydb.setCustomOperator(\n   *     function(propertyValue, testValue){\n   *         return (propertyValue.length == testValue.length);\n   *     });\n   *\n   */\nSixdb.prototype.setCustomOperator = function (compareFunction) {\n  if (compareFunction) {\n    if (typeof compareFunction == 'function') {\n      if (compareFunction.length == 2) {\n        customOperator = compareFunction;\n      }\n    }\n  }\n};\n\n/**\n   * Execs pending tasks. The tasks are executed sequentially.\n   * A task does not run until the previous one ends.\n   * <br>This avoids problems arising from the asynchronous nature of the indexedDB api.\n   * @method window.Sixdb#execTask\n   * @instance\n   */\nSixdb.prototype.execTasks = function () {\n  execTasks();\n};\n\nSixdb.prototype.checkStore = function (storeName, callback=voidFn) {\n  let args = [\n    storeName,\n    callback\n  ];\n  let task = {\n    args: args,\n    fn: checkStore\n  };\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\n/**\n * Creates a task wich creates a store object in the database.\n * @method window.Sixdb#newStore\n * @instance\n * @param  {string} storeName The store name.\n * @param  {object} [options]\n * @param  {string} [options.keyPath] The key path to be used by the new object store. \n * <br>If empty or not specified, the object store is created without a key path and uses out-of-line keys. \n * <br>You can also pass in an array as a keyPath.\n * @param  {Boolean} [options.autoIncrement] If true, the object store has a key generator. Defaults to false.\n * @param  {function} [options.succesCallback] Function called on success. Receives as parameters event and origin.\n * @param  {function} [options.errorCallback] Optional function to handle errors. Receives an error object as argument.\n */\nSixdb.prototype.newStore = function (\n  storeName,\n  { keyPath, autoIncrement, successCallback, errorCallback } = {}\n) {\n  let args = [\n    storeName,\n    {\n      keyPath: keyPath,\n      autoIncrement: autoIncrement,\n      successCallback: successCallback,\n      errorCallback: errorCallback\n    }\n  ];\n  let task = {\n    args: args,\n    fn: newStore\n  };\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\n/**\n * Returns an existing store object ready to use\n * @method window.Sixdb#openStore\n * @instance\n * @param  {string} storeName Name of the store.\n * @return {object}\n */\nSixdb.prototype.openStore = function (storeName) {\n  return new Store(storeName);\n};\n\n/**\n * Deletes an object store.\n * @method window.Sixdb#delStore\n * @instance\n * @param  {string} storeName Name of the object store. \n * @param  {object} options\n * @param  {function} [options.succesCallback] Function called on success. Receives as parameters event and origin.\n * @param  {function} [options.errorCallback] Optional function to handle errors. Receives an error object as argument.\n */\nSixdb.prototype.delStore = function (\n  storeName,\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let options = {\n    successCallback: successCallback,\n    errorCallback: errorCallback\n  };\n  let args = [storeName, options];\n  let task = {\n    args: args,\n    fn: delStore\n  };\n\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\n/**\n * The current database is deleted.\n * @method window.Sixdb#destroy\n * @instance\n * @param  {object} options\n * @param  {function} [options.succesCallback] Function called on success. Receives as parameters event and origin.\n * @param  {function} [options.errorCallback] Optional function to handle errors. Receives an error object as argument.\n */\nSixdb.prototype.destroy = function (\n  { successCallback = voidFn, errorCallback = voidFn } = {}\n) {\n  let options = {\n    successCallback: successCallback,\n    errorCallback: errorCallback\n  };\n\n  let args = [options];\n  let task = {\n    args: args,\n    fn: delDB\n  };\n\n  tasks.push(task);\n};\n\n/**\n * Creates a join operation on two stores. Joins those objects where store1.keypath = store2.index.keypath <br>\n * and returns the result to a success callback.\n * @method window.Sixdb#join\n * @instance\n * @param  {object} options\n * @param  {string} options.store1Name Name of the store with a primary unique key\n * @param  {string} options.store2Name Name of the second store\n * @param  {string} options.indexName Name of the second store index\n * @param  {function} options.succesCallback Function called on success. Receives as parameters the join result and origin.\n * @param  {function} [options.errorCallback] Optional function to handle errors. Receives an error object as argument.\n * @example\n * // An example of object stored in store \"Employees\"\n * //\n * let person = {\n *     id: 1,                // <<<<<< keyPath of store1\n *     name: 'Peter',\n *     age: 32,\n *     salary: 1100\n * };\n * // An example of object stored in store \"Productions\"\n * //\n * let report = {\n *     reportId: 5,                \n *     employeeId: 1,        // <<<<<<<<<< keyPath of index \"employeeIds\" in store \"Productions\"\n *     production: 150\n * };\n * \n * const mydb = new Sixdb('myDatabase');\n * \n * mydb.join(\n * {\n * store1Name: 'Employees',\n * store2Name: 'Productions',\n * indexName: 'employeeIds',\n * successCallback: mySuccessCallback\n * }\n * );\n * \n * // The expected results array received by the successCallback contains objects like:\n * // {id:1, name:'Peter, age:32, salary:1100, reportId:5, employeeId:1, production:150}   <<<<<<< id = employeeId\n * \n *  \n * mydb.execTasks();\n */\nSixdb.prototype.join = function ({\n  store1Name,\n  store2Name,\n  indexName,\n  succesCallback,\n  errorCallback = voidFn\n}) {\n  let args = [\n    {\n      store1Name,\n      store2Name,\n      indexName,\n      succesCallback,\n      errorCallback\n    }\n  ];\n\n  let task = {\n    args: args,\n    fn: join\n  };\n\n  tasks.push(tkOpen);\n  tasks.push(task);\n};\n\nexport { /*consoleOff,*/ db, newStore, dbName, tkOpen, setDb, voidFn };\n","import {\n  _qrySys,\n  checkTasks,\n  db,\n  done,\n  lastErrorObj,\n  logger,\n  makeErrorObject,\n  tasks,\n} from './index.js';\n\nconst qrySys = _qrySys;\nlet sharedObj = {};\n\nfunction testCursor(conditionsBlocksArray, exitsInFirst, cursor) {\n  let test = false;\n  let i = 0;\n  let size = conditionsBlocksArray.length;\n  for (i = 0; i < size; i++) {\n    let conditions = conditionsBlocksArray[i].conditionsArray;\n    let intMode = conditionsBlocksArray[i].internalLogOperator;\n    test = qrySys.testConditionBlock(cursor, conditions, intMode);\n    if (test == exitsInFirst) {\n      break;\n    }\n  }\n  return test;\n}\n\nfunction reportCatch(origin, e, errorCallback) {\n  makeErrorObject(origin, e);\n  tasks.shift();\n  db.close();\n  errorCallback(lastErrorObj);\n  logger(lastErrorObj, true);\n}\n\nexport function cursorAggregate(cursor) {\n  if (cursor.value[sharedObj.property]) {\n    sharedObj.counter++;\n    sharedObj.actualValue = sharedObj.aggregatefn(\n      sharedObj.actualValue,\n      cursor.value[sharedObj.property],\n      sharedObj.counter\n    );\n  }\n}\n\nexport function aggregateLog() {\n  logger(\n    `Result of ${sharedObj.origin} on property \"${sharedObj.property}\": ${sharedObj.actualValue}`\n  );\n}\n\nexport function setSharedObj(obj) {\n  sharedObj = obj;\n}\n\nexport function requestSuccessAction(event, origin, successCallback, message) {\n  successCallback(event, origin);\n  db.close();\n  logger(message);\n  done();\n}\n\nexport function requestErrorAction(origin, error, errorCallback) {\n  db.close();\n  makeErrorObject(origin, error);\n  logger(lastErrorObj, true);\n  tasks.shift();\n  errorCallback(lastErrorObj);\n  checkTasks();\n}\n\nexport function tryGetAll(origin, source, errorCallback) {\n  let request = null;\n  try {\n    request = source.getAll();\n  } catch (e) {\n    reportCatch(origin, e, errorCallback);\n    return null;\n  }\n  return request;\n}\n\nexport function tryOpenCursor(origin, source, errorCallback) {\n  let request = null;\n  try {\n    request = source.openCursor();\n  } catch (e) {\n    reportCatch(origin, e, errorCallback);\n    return null;\n  }\n  return request;\n}\n\nexport function cursorLoop(cursor) {\n  if (cursor) {\n    let test = testCursor(\n      sharedObj.conditionsBlocksArray,\n      sharedObj.exitsInFirstTrue,\n      cursor\n    );\n\n    if (test) {\n      sharedObj.cursorFunction(cursor);\n    }\n    cursor.continue();\n  } else {\n    sharedObj.successCallback(sharedObj.event, sharedObj.origin, sharedObj.query);\n    db.close();\n    sharedObj.logFunction();\n    done();\n  }\n}\n\nexport function cursorGetRecords(cursor) {\n  sharedObj.resultFiltered.push(cursor.value);\n  sharedObj.counter++;\n}\n\nexport function cursorDelRecords(cursor) {\n  cursor.delete();\n  sharedObj.counter++;\n}\n\nexport function cursorCount() {\n  sharedObj.counter++;\n}\n\nexport function cursorUpdate(cursor) {\n  let updateData = cursor.value;\n  for (let i = 0, j = sharedObj.newObjectValuesSize; i < j; i++) {\n    // If the new value for the property keys[i] is a function then the new value is function(oldValue)\n    updateData[sharedObj.keys[i]] =\n      typeof sharedObj.objectValues[sharedObj.keys[i]] == 'function'\n        ? sharedObj.objectValues[sharedObj.keys[i]](updateData[sharedObj.keys[i]])\n        : sharedObj.objectValues[sharedObj.keys[i]];\n  }\n\n  cursor.update(updateData);\n  sharedObj.counter++;\n}\n\nexport function countLog() {\n  logger(\n    `Processed query finished: \"${sharedObj.query}\"\\n ${sharedObj.counter} records counted from the query to: \"${sharedObj.source}\"`\n  );\n}\n\nexport function queryLog() {\n  logger(\n    `Processed query: \"${sharedObj.query}\" finished\\n ${sharedObj.counter} records returned from object store \"${sharedObj.source}\"`\n  );\n}\n\nexport function tryGetByKey(origin, source, key, errorCallback) {\n  let request = null;\n  try {\n    request = source.getAll(key);\n  } catch (e) {\n    reportCatch(origin, e, errorCallback);\n    return null;\n  }\n  return request;\n}\n\nexport function isKey(query) {\n  let isKey = false;\n  if (query) {\n    if (typeof query == 'number') {\n      isKey = true;\n    } else {\n      isKey = query.match(qrySys.operatorRgx) ? false : true;\n    }\n  }\n  return isKey;\n}\n\nexport function initCursorLoop(source, errorCallback) {\n  let request = tryOpenCursor(sharedObj.origin, source, errorCallback);\n  if (!request) {\n    checkTasks();\n    return;\n  }\n  request.onsuccess = function (event) {\n    let cursor = event.target.result;\n    cursorLoop(cursor);\n  };\n  request.onerror = function () {\n    requestErrorAction(origin, request.error, errorCallback);\n  };\n}\n","export { _qrySys } from './qrySys.js';\nexport { tasks, done, execTasks, checkTasks } from './taskQueue';\nexport { logEnum, logger } from './logger.js';\nexport { Store } from './sixdbStore';\nexport { Index } from './sixdbIndex';\nexport { makeErrorObject, lastErrorObj } from './errorSys';\nexport { db, dbName, setDb, tkOpen, voidFn, /*customOperator, consoleOff*/ } from './sixdb';\nexport {\n    aggregateLog,\n    countLog,\n    cursorAggregate,\n    cursorCount,\n    cursorDelRecords,\n    cursorGetRecords,\n    cursorLoop,\n    cursorUpdate,\n    initCursorLoop,\n    isKey,\n    queryLog,\n    requestErrorAction,\n    requestSuccessAction,\n    setSharedObj,\n    tryGetAll,\n    tryGetByKey,\n    tryOpenCursor,\n} from './helpers';\n\n\nwindow.consoleOff = false;\nwindow.customOperator = function (value1, value2) {\n    return value1 == value2;\n  };"],"names":["init","this","blockRgx","blockOperatorRgx","operatorRgx","rightOperandRgx","leftOperandRgx","makeConditionsBlocksArray","query","conditionsBlocksArray","match","t","extLogOperator","blocks","pushConditionBlockToArray","deleteLeftParentheses","i","length","size","substr","leftOperands","rightOperands","replace","trim","operators","conditionsArray","push","keyPath","cond","value","internalLogOperator","externalLogOperator","logOperatorsType","_i2","testConditionBlock","cursor","operator","test","testCondition","value1","condition","value2","result","indexOf","customOperator","e","idle","tasks","checkTasks","logger","task","type","logEnum","begin","fn","apply","context","args","done","shift","execTasks","_store","message","isError","consoleOff","console","error","log","qrySys","_qrySys","setStore","storeName","rwMode","db","transaction","objectStore","makeErrorObject","lastErrorObj","initStore","newIndex","indexName","_temp","version","_ref","successCallback","voidFn","_ref$successCallback","_ref$errorCallback","errorCallback","origin","indexNames","contains","requestSuccessAction","close","window","indexedDB","open","dbName","request","onupgradeneeded","event","setDb","target","upgradeTransaction","createIndex","requestErrorAction","onsuccess","onerror","obj","_ref2","_ref2$successCallback","_ref2$errorCallback","Array","isArray","_ref3","objSize","counter","_loop","add","name","addRecordA","_ref4","addRecordB","getAll","tryGetAll","isKey","tryGetByKey","getBykey","resultFiltered","setSharedObj","source","extMode","exitsInFirstTrue","logFunction","queryLog","cursorFunction","cursorGetRecords","tryOpenCursor","cursorLoop","del","delByKey","cursorDelRecords","countLog","cursorCount","initCursorLoop","count","countAll","checkIndex","callback","exists","delIndex","deleteIndex","getaggregateFunction","property","aggregatefn","_ref5","_ref5$errorCallback","commonArgs","_ref7","actualValue","aggregateLog","cursorAggregate","getAggregateFunctionB","_ref6","getaggregateFunctionA","objectValues","_ref9","keys","Object","newObjectValuesSize","cursorUpdate","clear","_ref10","tkOpen","Store","_storeName","prototype","_temp2","unique","_ref11","openIndex","Index","_temp3","_ref12","addRecord","initTasks","get","_temp4","_ref13","_ref13$successCallbac","_ref13$errorCallback","_ref14","_temp5","_ref14$errorCallback","_temp6","_ref15","_ref15$errorCallback","aggregateFn","_temp7","_ref8","_ref16","update","_temp8","_ref17$errorCallback","_ref17","_ref17$successCallbac","_ref18","_ref18$successCallbac","_ref18$errorCallback","_index","setIndex","index","initIndex","_indexName","domException","errorObj","description","exports","alert","_db","checkStore","objectStoreNames","newStore","autoIncrement","createObjectStore","delStore","deleteObjectStore","deleteDatabase","join","store1Name","store2Name","joinResult","store1Result","store2Result","indexKeyPath","store1ResultLength","store2ResultLength","posCursor1","posCursor2","store1","store1KeyPath","makeJoinResult","assign","store2Index","Sixdb","_dbName","noDb","setConsoleOff","_consoleOff","customTask","j","arguments","argsArray","aggregateFuncs","sum","actual","selected","avg","max","min","setCustomOperator","compareFunction","openStore","_ref6$errorCallback","_ref6$successCallback","destroy","delDB","_ref8$errorCallback","succesCallback","reportCatch","sharedObj","openCursor","exitsInFirst","testCursor","updateData","key"],"mappings":"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"}