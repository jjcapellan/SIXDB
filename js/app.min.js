var taskQueue=[],idle=!0,cliente1={nombre:"Antonio",telefono:"986585254"},cliente2={nombre:"Manolo",telefono:"600124512"},factura1={idcliente:"1",importe:120},factura2={idcliente:"2",importe:320},factura3={idcliente:"1",importe:145},arrayFacturas=[{idcliente:"1",importe:15},{idcliente:"2",importe:460},{idcliente:"2",importe:500}],add={db:function(dbName){var task={type:"newDB",dbName:dbName};taskQueue.push(task)},store:function(dbName,storeName,keyPath,autoIncrement){var task={type:"newStore",dbName:dbName,storeName:storeName,keyPath:keyPath,autoIncrement:autoIncrement};taskQueue.push(task)},records:function(dbName,storeName,obj){var task={type:"newRecords",dbName:dbName,storeName:storeName,obj:obj};taskQueue.push(task)},index:function(dbName,storeName,indexName,keyPath){var task={type:"newIndex",dbName:dbName,storeName:storeName,indexName:indexName,keyPath:keyPath};taskQueue.push(task)}},remove={db:function(dbName){var task={type:"removeDB",dbName:dbName};taskQueue.push(task)},store:function(dbName,storeName){var task={type:"removeStore",dbName:dbName,storeName:storeName};taskQueue.push(task)},record:function(dbName,storeName,recordKey){var task={type:"removeRecord",dbName:dbName,storeName:storeName,recordKey:recordKey};taskQueue.push(task)}},update={records:function(dbName,storeName,recordKey,prop,value){var task={type:"updateRecords",dbName:dbName,storeName:storeName,recordKey:recordKey,prop:prop,value:value};taskQueue.push(task)}},get={records:function(dbName,storeName,minKey,maxKey){var task={type:"getRecords",dbName:dbName,storeName:storeName,minKey:minKey,maxKey:maxKey};taskQueue.push(task)}};function isIndexedDBavailable(){var available=!0;return"indexedDB"in window||(console.log("This browser doesn't support IndexedDB"),available=!1),available}function newDB(dbName){var request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db;event.target.result.close(),console.log("Database "+dbName+" created"),taskQueue.shift(),checkTasks()}}function newStore(dbName,storeName,keyPath,autoIncrement){var db,version,request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;version=db.version,db.close(),console.log("Version tested");var newVersion=version+1;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){(db=event.target.result).createObjectStore(storeName,{keyPath:keyPath,autoIncrement:autoIncrement})},request.onsuccess=function(event){db.close(),taskQueue.shift(),console.log("New objectStore "+storeName+" created"),checkTasks()}}}function newRecord(dbName,storeName,obj){var request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;console.log("Database "+dbName+" opened");var counter=0,store=db.transaction(storeName,"readwrite").objectStore(storeName),i,objSize,request;if(Array.isArray(obj))for(objSize=obj.length,i=0;i<objSize;i++){var request;(request=store.add(obj[i])).onsuccess=function(event){++counter==objSize&&(console.log("Records added in store "+storeName),db.close(),taskQueue.shift(),console.log("Database "+dbName+" closed"),checkTasks())}}else(request=store.add(obj)).onsuccess=function(event){console.log("record added"),db.close(),taskQueue.shift(),console.log("Database "+dbName+" closed"),checkTasks()}}}function newIndex(dbName,storeName,indexName,keyPath){var db,version,request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;version=db.version,db.close(),console.log("Version tested");var newVersion=version+1;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){var upgradeTransaction,store;db=event.target.result,event.target.transaction.objectStore(storeName).createIndex(indexName,keyPath)},request.onsuccess=function(event){db.close(),taskQueue.shift(),console.log("New index "+indexName+" created in objectStore "+storeName),checkTasks()}}}function removeStore(dbName,storeName){var db,version,request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;version=db.version,db.close(),console.log("Version tested");var newVersion=version+1;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){(db=event.target.result).deleteObjectStore(storeName)},request.onsuccess=function(event){db.close(),console.log("ObjectStore "+storeName+" deleted"),taskQueue.shift(),checkTasks()}}}function removeDB(dbName){var request=window.indexedDB.deleteDatabase(dbName);request.onerror=function(event){console.log("Error deleting database "+dbName)},request.onsuccess=function(event){taskQueue.shift(),console.log("Database "+dbName+" deleted"),checkTasks()}}function removeRecord(dbName,storeName,recordKey){var request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;console.log("Database "+dbName+" opened");var store,removeRequest=db.transaction(storeName,"readwrite").objectStore(storeName).delete(recordKey);removeRequest.onsuccess=function(event){db.close(),console.log("Database closed"),taskQueue.shift(),console.log("Record with primary key "+recordKey+" deleted"),checkTasks()},removeRequest.onerror=function(event){console.log("Error deleting record: "+removeRequest.error)}}}function updateRecords(dbName,storeName,recordKey,prop,value){var request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName),getRequest=store.get(recordKey);getRequest.onsuccess=function(event){var record=event.target.result;record[prop]=value;var updateRequest=store.put(record);updateRequest.onsuccess=function(event){db.close(),console.log("Database closed"),taskQueue.shift(),console.log("Record with primary key "+recordKey+" updated"),checkTasks()},updateRequest.onerror=function(event){console.log("Error updating record: "+updateRequest.error)}},getRequest.onerror=function(event){console.log("Error getting record: "+removeRequest.error)}}}function checkTasks(){if(0==taskQueue.length)return idle=!0,void console.log("No pending tasks");idle=!1;var type=taskQueue[0].type,task=taskQueue[0];switch(console.log(type),console.log(taskQueue[0]),type){case"newStore":newStore(task.dbName,task.storeName,task.keyPath,task.autoIncrement);break;case"newRecords":newRecord(task.dbName,task.storeName,task.obj);break;case"newDB":newDB(task.dbName);break;case"removeStore":removeStore(task.dbName,task.storeName);break;case"removeDB":removeDB(task.dbName);break;case"removeRecord":removeRecord(task.dbName,task.storeName,task.recordKey);break;case"updateRecords":updateRecords(task.dbName,task.storeName,task.recordKey,task.prop,task.value);break;case"newIndex":newIndex(task.dbName,task.storeName,task.indexName,task.keyPath)}}function execTasks(){idle&&checkTasks()}add.index("test3","campo1","indice1","importe"),execTasks();