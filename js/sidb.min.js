var sidb=function(){var taskQueue=[],idle=!0,bloquedDbName="",t=this,marker=function(){this.position=1};function lastRecords(dbName,storeName,maxResults,callback){if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.open(dbName),noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName),storeSize=store.count(),getRequest;storeSize.onsuccess=function(){var keyRange=IDBKeyRange.lowerBound(storeSize.result-maxResults,!0);(getRequest=store.getAll(keyRange)).onsuccess=function(event){callback(event.target.result),db.close(),console.log("Database closed"),taskQueue.shift(),console.log("Last "+maxResults+"records retrieved from object store "+storeName),checkTasks()},getRequest.onerror=function(event){console.log("Error getting records: "+getRequest.error)}}}}function recordByIndex(dbName,storeName,indexName,keyValue,callback){if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.open(dbName),noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");console.log("Database "+dbName+" opened");var store,index,getRequest=db.transaction(storeName,"readwrite").objectStore(storeName).index(indexName).get(keyValue);getRequest.onsuccess=function(event){callback(event.target.result),db.close(),console.log("Database closed"),taskQueue.shift(),console.log("Record with key value "+keyValue+" retrieved from index "+indexName+" in object store "+storeName),checkTasks()},getRequest.onerror=function(event){console.log("Error getting record: "+getRequest.error)}}}function recordsByFilter(dbName,storeName,indexName,filterObject,callback){if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.open(dbName),noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName),resultFiltered=[],index;store.index(indexName).openCursor().onsuccess=function(event){var cursor=event.target.result,i=0,filterObjectSize=filterObject.length,test;if(cursor){for(test=!0,i=0;i<filterObjectSize&&(test=testCondition(cursor.value[filterObject[i].keyPath],filterObject[i].cond,filterObject[i].value));i++);test&&resultFiltered.push(cursor.value),cursor.continue()}else callback(resultFiltered),db.close(),console.log("Database closed"),taskQueue.shift(),console.log("Records filtered by index "+indexName+" retrieved from object store "+storeName),checkTasks()}}}function newDB(dbName,errorCallback){var request=window.indexedDB.open(dbName);request.onsuccess=function(event){var db;event.target.result.close(),console.log("Database "+dbName+" created"),taskQueue.shift(),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error creating database "+dbName+" : "+request.error)}}function newStore(dbName,storeName,errorCallback){var db,version;if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.open(dbName);request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)};var noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),bloquedDbName=dbName,console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");if(db.objectStoreNames.contains(storeName))return db.close(),taskQueue.shift(),console.log("Object store "+storeName+" already exists"),void checkTasks();version=db.version,db.close(),console.log("Version tested");var newVersion=version+1,store;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){db=event.target.result,(store=db.createObjectStore(storeName,{keyPath:"nId",autoIncrement:!0})).onerror=function(event){console.log("error"),errorCallback?errorCallback(event):console.log("Error in database "+dbName+" : "+db.error)}},request.onsuccess=function(event){db.close(),taskQueue.shift(),console.log("New objectStore "+storeName+" created"),checkTasks()}}}function newRecord(dbName,storeName,obj,errorCallback){if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.open(dbName),noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");console.log("Database "+dbName+" opened");var counter=0,store=db.transaction(storeName,"readwrite").objectStore(storeName),i,objSize,request;if(Array.isArray(obj))for(objSize=obj.length,i=0;i<objSize;i++){var request;(request=store.add(obj[i])).onsuccess=function(event){++counter==objSize&&(console.log("Records added in store "+storeName),db.close(),taskQueue.shift(),console.log("Database "+dbName+" closed"),checkTasks())},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error adding records to store "+storeName+" : "+request.error)}}else(request=store.add(obj)).onsuccess=function(event){console.log("record added"),db.close(),taskQueue.shift(),console.log("Database "+dbName+" closed"),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error adding record to store "+storeName+" : "+request.error)}}}function newIndex(dbName,storeName,indexName,keyPath,errorCallback){var db,version;if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.open(dbName);request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)};var noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");version=db.version,db.close(),console.log("Version tested");var newVersion=version+1;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){db=event.target.result;var upgradeTransaction,store=event.target.transaction.objectStore(storeName);if(store.indexNames.contains(indexName))return db.close(),taskQueue.shift(),console.log('Index "'+indexName+'" already exists in object store '+storeName),void checkTasks();store.createIndex(indexName,keyPath)},request.onsuccess=function(event){db.close(),taskQueue.shift(),console.log("New index "+indexName+" created in objectStore "+storeName),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error creating index "+indexName+" in store "+storeName+" : "+request.error)}}}function removeStore(dbName,storeName,errorCallback){var db,version;if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.open(dbName),noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");version=db.version,db.close(),console.log("Version tested");var newVersion=version+1;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){(db=event.target.result).deleteObjectStore(storeName)},request.onsuccess=function(event){db.close(),console.log("ObjectStore "+storeName+" deleted"),taskQueue.shift(),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error deleting store "+storeName+" in database "+dbName+" : "+request.error)}}}function removeDB(dbName,errorCallback){if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.deleteDatabase(dbName);request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error deleting database "+dbName+" : "+request.error)},request.onsuccess=function(event){taskQueue.shift(),console.log("Database "+dbName+" deleted"),checkTasks(),bloquedDbName=""}}function removeRecord(dbName,storeName,recordKey,errorCallback){var request=window.indexedDB.open(dbName),noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");console.log("Database "+dbName+" opened");var store,removeRequest=db.transaction(storeName,"readwrite").objectStore(storeName).delete(recordKey);removeRequest.onsuccess=function(event){db.close(),console.log("Database closed"),taskQueue.shift(),console.log("Record with primary key "+recordKey+" deleted"),checkTasks()},removeRequest.onerror=function(event){console.log("Error deleting record: "+removeRequest.error)}}}function removeIndex(dbName,storeName,indexName,errorCallback){var db,version;if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.open(dbName),noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");version=db.version,db.close(),console.log("Version tested");var newVersion=version+1;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){var upgradeTransaction,store;db=event.target.result,event.target.transaction.objectStore(storeName).deleteIndex(indexName)},request.onsuccess=function(event){db.close(),taskQueue.shift(),console.log("Index "+indexName+" in objectStore "+storeName+" deleted"),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error deleting index "+dbName+" in object store "+storeName+" : "+request.error)}}}function updateRecords(dbName,storeName,recordKey,prop,value,errorCallback){if(bloquedDbName==dbName)return console.log("Database "+dbName+" doesn't exist"),taskQueue.shift(),void checkTasks();var request=window.indexedDB.open(dbName),noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;if(noDb)return db.close(),console.log("Database "+dbName+" doesn't exist"),void removeDB("dbName");console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName),getRequest=store.get(recordKey);getRequest.onsuccess=function(event){var record=event.target.result;if(!record)return console.log("Error getting record, the key "+recordKey+" does'nt exists"),db.close(),console.log("Database closed"),taskQueue.shift(),void checkTasks();record[prop]=value;var updateRequest=store.put(record);updateRequest.onsuccess=function(event){db.close(),console.log("Database closed"),taskQueue.shift(),console.log("Record with primary key "+recordKey+" updated"),checkTasks()},updateRequest.onerror=function(event){errorCallback?errorCallback(event):console.log("Error updating record in object store "+storeName+" in database "+dbName+" : "+updateRequest.error)}},getRequest.onerror=function(event){errorCallback?errorCallback(event):console.log("Error getting record in object store "+storeName+" in database "+dbName+" : "+getRequest.error)}}}function checkTasks(){if(0==taskQueue.length)return idle=!0,void console.log("No pending tasks");idle=!1;var type=taskQueue[0].type,task=taskQueue[0];switch(console.log(type),console.log(taskQueue[0]),type){case"newStore":newStore(task.dbName,task.storeName,task.errorCallback);break;case"newRecords":newRecord(task.dbName,task.storeName,task.obj,task.errorCallback);break;case"newDB":newDB(task.dbName,task.errorCallback);break;case"removeStore":removeStore(task.dbName,task.storeName,errorCallback);break;case"removeDB":removeDB(task.dbName,task.errorCallback);break;case"removeRecord":removeRecord(task.dbName,task.storeName,task.recordKey,task.errorCallback);break;case"removeIndex":removeIndex(task.dbName,task.storeName,task.indexName,task.errorCallback);break;case"updateRecords":updateRecords(task.dbName,task.storeName,task.recordKey,task.prop,task.value,task.errorCallback);break;case"newIndex":newIndex(task.dbName,task.storeName,task.indexName,task.keyPath,task.errorCallback);break;case"lastRecords":lastRecords(task.dbName,task.storeName,task.maxResults,task.callback);break;case"recordByIndex":recordByIndex(task.dbName,task.storeName,task.indexName,task.keyValue,task.callback);break;case"recordsByFilter":recordsByFilter(task.dbName,task.storeName,task.indexName,task.filterObject,task.callback)}}function testCondition(value1,condition,value2){var result;switch(condition){case"=":return result=value1==value2;case">":return result=value1>value2;case"<":return result=value1<value2;case">=":return result=value1>=value2;case"<=":return result=value1<=value2;case"!=":return result=value1!=value2}}this.add={db:function(dbName,errorCallback){var task={type:"newDB",dbName:dbName,errorCallback:errorCallback};taskQueue.push(task)},store:function(dbName,storeName,errorCallback){var task={type:"newStore",dbName:dbName,storeName:storeName,errorCallback:errorCallback};taskQueue.push(task)},records:function(dbName,storeName,obj,errorCallback){var task={type:"newRecords",dbName:dbName,storeName:storeName,obj:obj,errorCallback:errorCallback};taskQueue.push(task)},index:function(dbName,storeName,indexName,keyPath,errorCallback){var task={type:"newIndex",dbName:dbName,storeName:storeName,indexName:indexName,keyPath:keyPath,errorCallback:errorCallback};taskQueue.push(task)}},this.remove={db:function(dbName,errorCallback){var task={type:"removeDB",dbName:dbName,errorCallback:errorCallback};taskQueue.push(task)},store:function(dbName,storeName,errorCallback){var task={type:"removeStore",dbName:dbName,storeName:storeName,errorCallback:errorCallback};taskQueue.push(task)},record:function(dbName,storeName,recordKey,errorCallback){var task={type:"removeRecord",dbName:dbName,storeName:storeName,recordKey:recordKey,errorCallback:errorCallback};taskQueue.push(task)},index:function(dbName,storeName,indexName,errorCallback){var task={type:"removeIndex",dbName:dbName,storeName:storeName,indexName:indexName,errorCallback:errorCallback};taskQueue.push(task)}},this.update={records:function(dbName,storeName,recordKey,prop,value,errorCallback){var task={type:"updateRecords",dbName:dbName,storeName:storeName,recordKey:recordKey,prop:prop,value:value,errorCallback:errorCallback};taskQueue.push(task)}},this.get={lastRecords:function(dbName,storeName,maxResults,callback){var task={type:"lastRecords",dbName:dbName,storeName:storeName,maxResults:maxResults,callback:callback};taskQueue.push(task)},recordByIndex:function(dbName,storeName,indexName,keyValue,callback){var task={type:"recordByIndex",dbName:dbName,storeName:storeName,indexName:indexName,keyValue:keyValue,callback:callback};taskQueue.push(task)},recordsByFilter:function(dbName,storeName,indexName,filterObject,callback){var task={type:"recordsByFilter",dbName:dbName,storeName:storeName,indexName:indexName,filterObject:filterObject,callback:callback};taskQueue.push(task)}},this.utils={pageFromArray:function(array,elementsPerPage,page){var pageArray;return console.log(Array.isArray(array)),array.slice((page-1)*elementsPerPage,page*elementsPerPage)}},this.execTasks=function(){idle&&checkTasks()},this.isIndexedDBavailable=function(){var available=!0;return"indexedDB"in window||(console.log("This browser doesn't support IndexedDB"),available=!1),available}};