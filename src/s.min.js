/** 
 * @license
 * MIT LICENSE
 * 
 * Copyright (c) 2018 Juan Jose Capellan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var sidb=function(_dbName){var dbName=_dbName;function lastRecords(storeName,maxResults,successCallback,errorCallback){var request=window.indexedDB.open(dbName);var origin="lastRecords";request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")};request.onsuccess=function(event){var db=event.target.result;var resultFiltered=[];console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName);var counter=0;var onsuccesCursorFunction=function(event){var cursor=event.target.result;if(cursor&&counter<maxResults){resultFiltered.push(cursor.value);console.log("pushed");counter++;cursor.continue()}else{successCallback(resultFiltered,origin);db.close();console.log("Database closed");console.log(counter+' last records returned from object store "'+storeName+'"');done()}};var onsuccesGetAllFunction=function(event){successCallback(event.target.result,origin);db.close();console.log("Database closed");console.log('All records returned from object store "'+storeName+'"');done()};var onerrorFunction=function(event){db.close();console.log("Database closed");console.log("Error retrieving records: "+event.target.error);if(errorCallback)errorCallback(event,origin);done()};if(maxResults!=null){var request=store.openCursor(null,"prev").onsuccess=onsuccesCursorFunction;request.onsuccess=onsuccesCursorFunction;request.onerror=onerrorFunction}else{var request=store.getAll();request.onsuccess=onsuccesGetAllFunction;request.onerror=onerrorFunction}}}function getRecords(storeName,indexName,query,successCallback,errorCallback){var request=window.indexedDB.open(dbName);var origin="getRecords";var isIndexKeyValue;if(typeof query=="number"){isIndexKeyValue=true}else{isIndexKeyValue=query.match(qrySys.operatorRgx)?false:true}request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")};request.onsuccess=function(event){var db=event.target.result;var conditionsBlocksArray=!isIndexKeyValue?qrySys.makeConditionsBlocksArray(query):null;console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName);var index;var counter=0;if(indexName!=null)index=store.index(indexName);var resultFiltered=[];var onsuccesIndexGetKey=function(event){successCallback(event.target.result,origin,query);db.close();console.log("Database closed");console.log('Records with key value "'+query+'" returned from index "'+indexName+'" on object store "'+storeName+'"');done()};var onsuccesCursor=function(event){var cursor=event.target.result;var extMode=conditionsBlocksArray[0].externalLogOperator;var test=false;var exitsInFirstTrue=extMode==null||extMode=="and"?false:true;if(cursor){var i=0;var test=false;for(i=0;i<conditionsBlocksArray.length;i++){var conditions=conditionsBlocksArray[i].conditionsArray;var intMode=conditionsBlocksArray[i].internalLogOperator;test=qrySys.testConditionBlock(cursor,conditions,intMode);if(test==exitsInFirstTrue){break}}if(test){resultFiltered.push(cursor.value);counter++}cursor.continue()}else{successCallback(resultFiltered,origin,query);db.close();console.log("Database closed");console.log('Processed query: "'+query+'" finished\n'+counter+' records returned from object store "'+storeName+'"');done()}};var onerrorFunction=function(event){db.close();console.log("Database closed");console.log("Error retrieving records: "+event.target.error);if(errorCallback)errorCallback(event,origin);done()};if(indexName!=null){if(!isIndexKeyValue){var request=index.openCursor();request.onsuccess=onsuccesCursor;request.onerror=onerrorFunction}else{var request=index.get(query);request.onsuccess=onsuccesIndexGetKey;request.onerror=onerrorFunction}}else{var request=store.openCursor();request.onsuccess=onsuccesCursor;request.onerror=onerrorFunction}}}function newDB(errorCallback){var request=window.indexedDB.open(dbName);var noDb=false;request.onupgradeneeded=function(event){noDb=true};request.onsuccess=function(event){var db=event.target.result;db.close();if(noDb){console.log('Database "'+dbName+'" created.')}else{console.log('Database "'+dbName+'" already exists.')}done()};request.onerror=function(event){if(errorCallback){errorCallback(event)}else{console.log("Error creating database "+dbName+" : "+request.error)}}}function newStore(storeName,successCallback,errorCallback){var version;var origin="newStore";var request=window.indexedDB.open(dbName);request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error opening database "+dbName+" : "+request.error)}};request.onsuccess=function(event){var db=event.target.result;if(db.objectStoreNames.contains(storeName)){db.close();console.log('Object store "'+storeName+'" already exists');done();return}version=db.version;db.close();console.log("Version tested");var newVersion=version+1;var store;request=window.indexedDB.open(dbName,newVersion);request.onupgradeneeded=function(event){db=event.target.result;store=db.createObjectStore(storeName,{keyPath:"nId",autoIncrement:true});store.onerror=function(event){console.log("error");if(errorCallback){errorCallback(event,origin)}else{console.log("Error in database "+dbName+" : "+db.error)}}};request.onsuccess=function(event){if(successCallback){successCallback(event,origin)}db.close();console.log("New objectStore "+storeName+" created");done()}}}function newRecord(storeName,obj,successCallback,errorCallback){var request=window.indexedDB.open(dbName);var origin="newRecord";request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error opening database "+dbName+" : "+request.error)}};request.onsuccess=function(event){var db=event.target.result;console.log("Database "+dbName+" opened");var counter=0;var store=db.transaction(storeName,"readwrite").objectStore(storeName);if(Array.isArray(obj)){var i,objSize;objSize=obj.length;for(i=0;i<objSize;i++){var request=store.add(obj[i]);request.onsuccess=function(event){counter++;if(counter==objSize){console.log("Records added in store "+storeName);if(successCallback){successCallback(event,origin)}db.close();console.log("Database "+dbName+" closed");done()}};request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error adding records to store "+storeName+" : "+request.error)}}}}else{var request=store.add(obj);request.onsuccess=function(event){console.log("record added");if(successCallback){successCallback(event,origin)}db.close();console.log("Database "+dbName+" closed");done()};request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error adding record to store "+storeName+" : "+request.error)}}}}}function newIndex(storeName,indexName,keyPath,successCallback,errorCallback){var version;var origin="newIndex";var request=window.indexedDB.open(dbName);request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error opening database "+dbName+" : "+request.error)}};request.onsuccess=function(event){var db=event.target.result;version=db.version;db.close();console.log("Version tested");var newVersion=version+1;request=window.indexedDB.open(dbName,newVersion);request.onupgradeneeded=function(event){db=event.target.result;var upgradeTransaction=event.target.transaction;var store=upgradeTransaction.objectStore(storeName);if(!store.indexNames.contains(indexName)){store.createIndex(indexName,keyPath)}else{db.close();console.log('Index "'+indexName+'" already exists in object store '+storeName);done();return}};request.onsuccess=function(event){if(successCallback){successCallback(event,origin)}db.close();console.log("New index "+indexName+" created in objectStore "+storeName);done()};request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error creating index "+indexName+" in store "+storeName+" : "+request.error)}}}}function deleteStore(storeName,successCallback,errorCallback){var version;var origin="deleteStore";var request=window.indexedDB.open(dbName);request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error opening database "+dbName+" : "+request.error)}};request.onsuccess=function(event){var db=event.target.result;version=db.version;db.close();console.log("Version tested");var newVersion=version+1;request=window.indexedDB.open(dbName,newVersion);request.onupgradeneeded=function(event){db=event.target.result;db.deleteObjectStore(storeName)};request.onsuccess=function(event){if(successCallback){successCallback(event,origin)}db.close();console.log("ObjectStore "+storeName+" deleted");done()};request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error deleting store "+storeName+" in database "+dbName+" : "+request.error)}}}}function deleteDB(successCallback,errorCallback){var request=window.indexedDB.deleteDatabase(dbName);var origin="deleteDB";request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error deleting database "+dbName+" : "+request.error)}};request.onsuccess=function(event){if(successCallback){successCallback(event,origin)}console.log("Database "+dbName+" deleted");done()}}function delRecords(storeName,indexName,query,successCallback,errorCallback){var request=window.indexedDB.open(dbName);var origin="deleteRecord";var isIndexKeyValue;if(typeof query=="number"){isIndexKeyValue=true}else{isIndexKeyValue=query.match(qrySys.operatorRgx)?false:true}request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")};request.onsuccess=function(event){var db=event.target.result;var conditionsBlocksArray;conditionsBlocksArray=!isIndexKeyValue?qrySys.makeConditionsBlocksArray(query):null;console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName);var index;var counter=0;if(indexName!=null)index=store.index(indexName);var onsuccesCursor=function(event){var cursor=event.target.result;var extMode=conditionsBlocksArray[0].externalLogOperator;var test=false;var exitsInFirstTrue=extMode==null||extMode=="and"?false:true;if(cursor){var i=0;var test=false;for(i=0;i<conditionsBlocksArray.length;i++){var conditions=conditionsBlocksArray[i].conditionsArray;var intMode=conditionsBlocksArray[i].internalLogOperator;test=qrySys.testConditionBlock(cursor,conditions,intMode);if(test==exitsInFirstTrue){break}}if(test){var request=cursor.delete();request.onsuccess=function(){counter++}}cursor.continue()}else{if(successCallback){successCallback(event,origin,query)}db.close();console.log("Database closed");console.log('Processed query: "'+query+'" finished\n'+counter+' records deleted from object store "'+storeName+'"');done()}};var onerrorFunction=function(event){if(errorCallback){errorCallback(event,origin)}db.close();console.log("Database closed");console.log("Error deleting records"+event.target.error);done()};if(indexName!=null){if(isIndexKeyValue){query=index.keyPath+"="+query;conditionsBlocksArray=qrySys.makeConditionsBlocksArray(query)}var request=index.openCursor();request.onsuccess=onsuccesCursor;request.onerror=onerrorFunction}else{var request=store.openCursor();request.onsuccess=onsuccesCursor;request.onerror=onerrorFunction}}}function deleteIndex(storeName,indexName,successCallback,errorCallback){var version;var origin="deleteIndex";var request=window.indexedDB.open(dbName);request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error opening database "+dbName+" : "+request.error)}};request.onsuccess=function(event){var db=event.target.result;version=db.version;db.close();console.log("Version tested");var newVersion=version+1;request=window.indexedDB.open(dbName,newVersion);request.onupgradeneeded=function(event){db=event.target.result;var upgradeTransaction=event.target.transaction;var store=upgradeTransaction.objectStore(storeName);store.deleteIndex(indexName)};request.onsuccess=function(event){if(successCallback){successCallback(event,origin)}db.close();console.log("Index "+indexName+" in objectStore "+storeName+" deleted");done()};request.onerror=function(event){if(errorCallback){errorCallback(event,origin)}else{console.log("Error deleting index "+dbName+" in object store "+storeName+" : "+request.error)}}}}function updateRecords(storeName,indexName,query,objectValues,successCallback,errorCallback){var request=window.indexedDB.open(dbName);var origin="updateRecords";var isIndexKeyValue;if(typeof query=="number"){isIndexKeyValue=true}else{isIndexKeyValue=query.match(qrySys.operatorRgx)?false:true}request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")};request.onsuccess=function(event){var db=event.target.result;var conditionsBlocksArray;conditionsBlocksArray=!isIndexKeyValue?qrySys.makeConditionsBlocksArray(query):null;console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName);var index;if(indexName!=null){index=store.index(indexName)}var counter=0;var onsuccesCursor=function(event){var cursor=event.target.result;var keys=Object.keys(objectValues);var newObjectValuesSize=keys.length;var extMode=conditionsBlocksArray?conditionsBlocksArray[0].externalLogOperator:null;var exitsInFirstTrue=extMode==null||extMode=="and"?false:true;if(cursor){var i=0;var test=false;for(i=0;i<conditionsBlocksArray.length;i++){var conditions=conditionsBlocksArray[i].conditionsArray;var intMode=conditionsBlocksArray[i].internalLogOperator;test=qrySys.testConditionBlock(cursor,conditions,intMode);if(test==exitsInFirstTrue){break}}if(test){var updateData=cursor.value;var i=0;for(i=0;i<newObjectValuesSize;i++){updateData[keys[i]]=typeof objectValues[keys[i]]=="function"?objectValues[keys[i]](updateData[keys[i]]):objectValues[keys[i]]}var request=cursor.update(updateData);request.onsuccess=function(){counter++}}cursor.continue()}else{if(successCallback){successCallback(event,origin,query)}db.close();console.log("Database closed");console.log('Processed query: "'+query+'" finished\n'+counter+' records updated from object store "'+storeName+'"');done()}};var onerrorFunction=function(event){if(errorCallback)errorCallback(event,origin);db.close();console.log("Database closed");console.log("Error retrieving records: "+event.target.error);done()};if(indexName!=null){if(isIndexKeyValue){query=index.keyPath+"="+query;conditionsBlocksArray=qrySys.makeConditionsBlocksArray(query)}var request=index.openCursor();request.onsuccess=onsuccesCursor;request.onerror=onerrorFunction}else{var request=store.openCursor();request.onsuccess=onsuccesCursor;request.onerror=onerrorFunction}}}var qrySys={init:function(){this.blockRgx=/(?<=\()([^)]+)(?=\))/g;this.blockOperatorRgx=/(?<=(\)\s*))([\&\|]+)(?=(\s*\())/g;this.operandRgx=/[\w'"]+/g;this.operatorRgx=/(=|>|<|>=|<=|!=)+/g;this.rightOperandRgx=/(?<=([=|>|<]\s*["']?))([^"^']+)(?=["']?\s*[\&\|]*)/g;this.leftOperandRgx=/(?<!([="']+)[\s\w]*)(\w+)(?=\s*[=|>|<|!]{1})/g},makeConditionsBlocksArray:function(query){var t=this;var blocks=query.match(t.blockRgx);var extLogOperator=query.match(t.blockOperatorRgx)?query.match(t.blockOperatorRgx):null;var conditionsBlocksArray=[];var pushConditionBlockToArray=function(qry,extLogOperator){var leftOperands=qry.match(t.leftOperandRgx);var rightOperands=qry.match(t.rightOperandRgx);var operators=qry.replace(t.rightOperandRgx,"").match(t.operatorRgx);var conditionsArray=[];if(leftOperands.length==1){conditionsArray.push({keyPath:leftOperands[0],cond:operators[0],value:rightOperands[0]});conditionsBlocksArray.push({conditionsArray:conditionsArray,internalLogOperator:null,externalLogOperator:extLogOperator});conditionsArray=null}else{var logOperatorsType=qry.match(/[\&\|]+/g)[0];if(logOperatorsType=="&"||logOperatorsType=="&&"){logOperatorsType="and"}else{logOperatorsType="or"}var i=0;for(i=0;i<operators.length;i++){conditionsArray.push({keyPath:leftOperands[i],cond:operators[i],value:rightOperands[i]})}conditionsBlocksArray.push({conditionsArray:conditionsArray,internalLogOperator:logOperatorsType,externalLogOperator:extLogOperator});conditionsArray=null}};if(!blocks){pushConditionBlockToArray(query,null);return conditionsBlocksArray}else{if(extLogOperator){if(extLogOperator=="&"||extLogOperator=="&&"){extLogOperator="and"}else{extLogOperator="or"}}var i=0;for(i=0;i<blocks.length;i++){pushConditionBlockToArray(blocks[i],extLogOperator)}return conditionsBlocksArray}},testConditionBlock:function(cursor,conditionsArray,operator){var t=this;var test=operator=="and"||operator==null?true:false;if(operator=="and"||operator==null){for(i=0;i<conditionsArray.length;i++){test=t.testCondition(cursor.value[conditionsArray[i].keyPath],conditionsArray[i].cond,conditionsArray[i].value);if(!test)return false}}else{for(i=0;i<conditionsArray.length;i++){test=t.testCondition(cursor.value[conditionsArray[i].keyPath],conditionsArray[i].cond,conditionsArray[i].value);if(test)return true}}return test},testCondition:function(value1,condition,value2){var result;switch(condition){case"=":result=value1==value2?true:false;return result;break;case">":result=value1>value2?true:false;return result;break;case"<":result=value1<value2?true:false;return result;break;case">=":result=value1>=value2?true:false;return result;break;case"<=":result=value1<=value2?true:false;return result;break;case"!=":result=value1!=value2?true:false;return result;break;default:break}}};var idle=true;var taskQueue=[];function done(){taskQueue.shift();checkTasks()}function checkTasks(){if(taskQueue.length==0){idle=true;console.log("No pending tasks");return}idle=false;var type=taskQueue[0].type;var task=taskQueue[0];switch(type){case"newStore":newStore(task.storeName,task.successCallback,task.errorCallback);break;case"newRecords":newRecord(task.storeName,task.obj,task.successCallback,task.errorCallback);break;case"newDB":newDB(task.errorCallback);break;case"custom":customTaskActive=true;task.fn.apply(task.context,task.args);done();break;case"deleteStore":deleteStore(task.storeName,task.successCallback,errorCallback);break;case"deleteDB":deleteDB(task.successCallback,task.errorCallback);break;case"deleteRecords":delRecords(task.storeName,task.indexName,task.query,task.successCallback,task.errorCallback);break;case"deleteIndex":deleteIndex(task.storeName,task.indexName,task.successCallback,task.errorCallback);break;case"updateRecordsByIndex":updateRecords(task.storeName,task.indexName,task.query,task.objectValues,task.successCallback,task.errorCallback);break;case"newIndex":newIndex(task.storeName,task.indexName,task.keyPath,task.successCallback,task.errorCallback);break;case"lastRecords":lastRecords(task.storeName,task.maxResults,task.successCallback,task.errorCallback);break;case"getRecords":getRecords(task.storeName,task.indexName,task.query,task.successCallback,task.errorCallback);break;default:break}}this.execTasks=function(){if(idle){checkTasks()}};this.add={db:function(errorCallback){var task={type:"newDB",errorCallback:errorCallback};taskQueue.push(task)},store:function(storeName,successCallback,errorCallback){var task={type:"newStore",storeName:storeName,successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)},records:function(storeName,obj,successCallback,errorCallback){var task={type:"newRecords",storeName:storeName,obj:obj,successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)},index:function(storeName,indexName,keyPath,successCallback,errorCallback){var task={type:"newIndex",storeName:storeName,indexName:indexName,keyPath:keyPath,successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)},customTask:function(fn,context,args){var argsArray=[];if(args){var i=0;for(i=2;i<arguments.length;i++){argsArray[2-i]=arguments[i]}}var task={type:"custom",fn:fn,context:context,args:argsArray};taskQueue.push(task)}};this.del={db:function(successCallback,errorCallback){var task={type:"deleteDB",successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)},store:function(storeName,successCallback,errorCallback){var task={type:"deleteStore",storeName:storeName,successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)},records:function(storeName,indexName,query,successCallback,errorCallback){var task={type:"deleteRecords",storeName:storeName,indexName:indexName,query:query,successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)},index:function(storeName,indexName,successCallback,errorCallback){var task={type:"deleteIndex",storeName:storeName,indexName:indexName,successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)}};this.update={records:function(storeName,indexName,query,objectValues,successCallback,errorCallback){var task={type:"updateRecordsByIndex",storeName:storeName,indexName:indexName,query:query,objectValues:objectValues,successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)}};this.get={lastRecords:function(storeName,maxResults,successCallback,errorCallback){var task={type:"lastRecords",storeName:storeName,maxResults:maxResults,successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)},records:function(storeName,indexName,query,successCallback,errorCallback){var task={type:"getRecords",storeName:storeName,indexName:indexName,query:query,successCallback:successCallback,errorCallback:errorCallback};taskQueue.push(task)}};this.utils={pageFromArray:function(array,elementsPerPage,page){console.log(Array.isArray(array));var pageArray=array.slice((page-1)*elementsPerPage,page*elementsPerPage);return pageArray}};this.getName=function(){return dbName};qrySys.init();this.add.db();this.execTasks()};