/** 
 * @license
 * MIT LICENSE
 * 
 * Copyright (c) 2018 Juan Jose Capellan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var sidb=function(_dbName){var taskQueue=[],dbName=_dbName,idle=!0;function lastRecords(storeName,maxResults,callback,errorCallback){var request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result,resultFiltered=[];console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName),counter=0,onsuccesCursorFunction=function(event){var cursor=event.target.result;cursor&&counter<maxResults?(resultFiltered.push(cursor.value),console.log("pushed"),counter++,cursor.continue()):(callback(resultFiltered),db.close(),console.log("Database closed"),console.log(counter+' last records returned from object store "'+storeName+'"'),taskQueue.shift(),checkTasks())},onsuccesGetAllFunction=function(event){callback(event.target.result),db.close(),console.log("Database closed"),console.log('All records returned from object store "'+storeName+'"'),taskQueue.shift(),checkTasks()},onerrorFunction=function(event){db.close(),console.log("Database closed"),console.log("Error retrieving records: "+event.target.error),errorCallback&&errorCallback(event),taskQueue.shift(),checkTasks()},request,request;null!=maxResults?((request=store.openCursor(null,"prev").onsuccess=onsuccesCursorFunction).onsuccess=onsuccesCursorFunction,request.onerror=onerrorFunction):((request=store.getAll()).onsuccess=onsuccesGetAllFunction,request.onerror=onerrorFunction)}}function getRecords(storeName,indexName,query,callback,errorCallback){var request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName),index,counter=0,filterObjectSize;null!=indexName&&(index=store.index(indexName));var queryIsArray=Array.isArray(query);console.log(queryIsArray),queryIsArray&&(filterObjectSize=query.length);var resultFiltered=[],onsuccesFunction=function(event){var cursor=event.target.result;if(cursor){if(queryIsArray)for(test=!0,i=0;i<filterObjectSize&&(test=testCondition(cursor.value[query[i].keyPath],query[i].cond,query[i].value),test);i++);else test=cursor.value[index.keyPath]===query;test&&(resultFiltered.push(cursor.value),console.log("pushed"),counter++),cursor.continue()}else callback(resultFiltered),db.close(),console.log("Database closed"),console.log(counter+' records returned from object store "'+storeName+'"'),taskQueue.shift(),checkTasks()},onerrorFunction=function(event){db.close(),console.log("Database closed"),console.log("Error retrieving records: "+event.target.error),errorCallback&&errorCallback(event),taskQueue.shift(),checkTasks()},request,request;null!=indexName?((request=index.openCursor()).onsuccess=onsuccesFunction,request.onerror=onerrorFunction):((request=store.openCursor()).onsuccess=onsuccesFunction,request.onerror=onerrorFunction)}}function newDB(errorCallback){var request=window.indexedDB.open(dbName),noDb=!1;request.onupgradeneeded=function(event){noDb=!0},request.onsuccess=function(event){var db;event.target.result.close(),noDb?console.log('Database "'+dbName+'" created.'):console.log('Database "'+dbName+'" already exists.'),taskQueue.shift(),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error creating database "+dbName+" : "+request.error)}}function newStore(storeName,errorCallback){var db,version,request=window.indexedDB.open(dbName);request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;if(db.objectStoreNames.contains(storeName))return db.close(),taskQueue.shift(),console.log('Object store "'+storeName+'" already exists'),void checkTasks();version=db.version,db.close(),console.log("Version tested");var newVersion=version+1,store;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){db=event.target.result,(store=db.createObjectStore(storeName,{keyPath:"nId",autoIncrement:!0})).onerror=function(event){console.log("error"),errorCallback?errorCallback(event):console.log("Error in database "+dbName+" : "+db.error)}},request.onsuccess=function(event){db.close(),taskQueue.shift(),console.log("New objectStore "+storeName+" created"),checkTasks()}}}function newRecord(storeName,obj,errorCallback){var request=window.indexedDB.open(dbName);request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;console.log("Database "+dbName+" opened");var counter=0,store=db.transaction(storeName,"readwrite").objectStore(storeName),i,objSize,request;if(Array.isArray(obj))for(objSize=obj.length,i=0;i<objSize;i++){var request;(request=store.add(obj[i])).onsuccess=function(event){++counter==objSize&&(console.log("Records added in store "+storeName),db.close(),taskQueue.shift(),console.log("Database "+dbName+" closed"),checkTasks())},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error adding records to store "+storeName+" : "+request.error)}}else(request=store.add(obj)).onsuccess=function(event){console.log("record added"),db.close(),taskQueue.shift(),console.log("Database "+dbName+" closed"),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error adding record to store "+storeName+" : "+request.error)}}}function newIndex(storeName,indexName,keyPath,errorCallback){var db,version,request=window.indexedDB.open(dbName);request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;version=db.version,db.close(),console.log("Version tested");var newVersion=version+1;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){db=event.target.result;var upgradeTransaction,store=event.target.transaction.objectStore(storeName);if(store.indexNames.contains(indexName))return db.close(),taskQueue.shift(),console.log('Index "'+indexName+'" already exists in object store '+storeName),void checkTasks();store.createIndex(indexName,keyPath)},request.onsuccess=function(event){db.close(),taskQueue.shift(),console.log("New index "+indexName+" created in objectStore "+storeName),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error creating index "+indexName+" in store "+storeName+" : "+request.error)}}}function removeStore(storeName,errorCallback){var db,version,request=window.indexedDB.open(dbName);request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;version=db.version,db.close(),console.log("Version tested");var newVersion=version+1;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){(db=event.target.result).deleteObjectStore(storeName)},request.onsuccess=function(event){db.close(),console.log("ObjectStore "+storeName+" deleted"),taskQueue.shift(),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error deleting store "+storeName+" in database "+dbName+" : "+request.error)}}}function removeDB(errorCallback){var request=window.indexedDB.deleteDatabase(dbName);request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error deleting database "+dbName+" : "+request.error)},request.onsuccess=function(event){taskQueue.shift(),console.log("Database "+dbName+" deleted"),checkTasks()}}function removeRecord(storeName,indexName,query,errorCallback){var request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName),index,counter=0,filterObjectSize;null!=indexName&&(index=store.index(indexName));var queryIsArray=Array.isArray(query);queryIsArray&&(filterObjectSize=query.length);var onsuccesFunction=function(event){var cursor=event.target.result;if(cursor){if(queryIsArray)for(test=!0,i=0;i<filterObjectSize&&(test=testCondition(cursor.value[query[i].keyPath],query[i].cond,query[i].value),test);i++);else test=cursor.value[index.keyPath]===query;var request;if(test)cursor.delete().onsuccess=function(){counter++};cursor.continue()}else taskQueue.shift(),db.close(),console.log("Database closed"),console.log(counter+" records were removed from object store"+storeName),checkTasks()},onerrorFunction=function(event){errorCallback&&errorCallback(event),taskQueue.shift(),db.close(),console.log("Database closed"),console.log("Error removing records"+event.target.error),checkTasks()},request,request;null!=indexName?((request=index.openCursor()).onsuccess=onsuccesFunction,request.onerror=onerrorFunction):((request=store.openCursor()).onsuccess=onsuccesFunction,request.onerror=onerrorFunction)}}function removeIndex(storeName,indexName,errorCallback){var db,version,request=window.indexedDB.open(dbName);request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error opening database "+dbName+" : "+request.error)},request.onsuccess=function(event){var db=event.target.result;version=db.version,db.close(),console.log("Version tested");var newVersion=version+1;(request=window.indexedDB.open(dbName,newVersion)).onupgradeneeded=function(event){var upgradeTransaction,store;db=event.target.result,event.target.transaction.objectStore(storeName).deleteIndex(indexName)},request.onsuccess=function(event){db.close(),taskQueue.shift(),console.log("Index "+indexName+" in objectStore "+storeName+" deleted"),checkTasks()},request.onerror=function(event){errorCallback?errorCallback(event):console.log("Error deleting index "+dbName+" in object store "+storeName+" : "+request.error)}}}function updateByIndex(storeName,indexName,query,objectValues,errorCallback){var request=window.indexedDB.open(dbName);request.onerror=function(event){alert("Error. You must allow web app to use indexedDB.")},request.onsuccess=function(event){var db=event.target.result;console.log("Database "+dbName+" opened");var store=db.transaction(storeName,"readwrite").objectStore(storeName),index,test,filterObjectSize;null!=indexName&&(index=store.index(indexName));var queryIsArray=Array.isArray(query);queryIsArray&&(filterObjectSize=query.length);var counter=0,onsuccesFunction=function(event){var cursor=event.target.result,keys=Object.keys(objectValues),newObjectValuesSize=keys.length;if(cursor){if(queryIsArray)for(test=!0,i=0;i<filterObjectSize&&(test=testCondition(cursor.value[query[i].keyPath],query[i].cond,query[i].value));i++);else test=cursor.value[index.keyPath]===query;if(test){var updateData=cursor.value,i=0,request;for(i=0;i<newObjectValuesSize;i++)updateData[keys[i]]="function"==typeof objectValues[keys[i]]?objectValues[keys[i]](updateData[keys[i]]):objectValues[keys[i]];cursor.update(updateData).onsuccess=function(){counter++}}cursor.continue()}else db.close(),console.log("Database closed"),taskQueue.shift(),console.log(counter+' records were updated from object store "'+storeName+'"'),checkTasks()},onerrorFunction=function(event){errorCallback&&errorCallback(event),db.close(),console.log("Database closed"),taskQueue.shift(),console.log("Error retrieving records: "+event.target.error),checkTasks()},request,request;null!=indexName?((request=index.openCursor()).onsuccess=onsuccesFunction,request.onerror=onerrorFunction):((request=store.openCursor()).onsuccess=onsuccesFunction,request.onerror=onerrorFunction)}}function checkTasks(){if(0==taskQueue.length)return idle=!0,void console.log("No pending tasks");idle=!1;var type=taskQueue[0].type,task=taskQueue[0];switch(type){case"newStore":newStore(task.storeName,task.errorCallback);break;case"newRecords":newRecord(task.storeName,task.obj,task.errorCallback);break;case"newDB":newDB(task.errorCallback);break;case"removeStore":removeStore(task.storeName,errorCallback);break;case"removeDB":removeDB(task.errorCallback);break;case"removeRecords":removeRecord(task.storeName,task.indexName,task.query,task.errorCallback);break;case"removeIndex":removeIndex(task.storeName,task.indexName,task.errorCallback);break;case"updateRecordsByIndex":updateByIndex(task.storeName,task.indexName,task.query,task.objectValues,task.errorCallback);break;case"newIndex":newIndex(task.storeName,task.indexName,task.keyPath,task.errorCallback);break;case"lastRecords":lastRecords(task.storeName,task.maxResults,task.callback,task.errorCallback);break;case"getRecords":getRecords(task.storeName,task.indexName,task.query,task.callback,task.errorCallback)}}function testCondition(value1,condition,value2){var result;switch(condition){case"=":return result=value1==value2;case">":return result=value1>value2;case"<":return result=value1<value2;case">=":return result=value1>=value2;case"<=":return result=value1<=value2;case"!=":return result=value1!=value2}}this.getName=function(){return dbName},this.add={db:function(errorCallback){var task={type:"newDB",errorCallback:errorCallback};taskQueue.push(task)},store:function(storeName,errorCallback){var task={type:"newStore",storeName:storeName,errorCallback:errorCallback};taskQueue.push(task)},records:function(storeName,obj,errorCallback){var task={type:"newRecords",storeName:storeName,obj:obj,errorCallback:errorCallback};taskQueue.push(task)},index:function(storeName,indexName,keyPath,errorCallback){var task={type:"newIndex",storeName:storeName,indexName:indexName,keyPath:keyPath,errorCallback:errorCallback};taskQueue.push(task)}},this.remove={db:function(errorCallback){var task={type:"removeDB",errorCallback:errorCallback};taskQueue.push(task)},store:function(storeName,errorCallback){var task={type:"removeStore",storeName:storeName,errorCallback:errorCallback};taskQueue.push(task)},records:function(storeName,indexName,query,errorCallback){var task={type:"removeRecords",storeName:storeName,indexName:indexName,query:query,errorCallback:errorCallback};taskQueue.push(task)},index:function(storeName,indexName,errorCallback){var task={type:"removeIndex",storeName:storeName,indexName:indexName,errorCallback:errorCallback};taskQueue.push(task)}},this.update={records:function(storeName,indexName,query,objectValues,errorCallback){var task={type:"updateRecordsByIndex",storeName:storeName,indexName:indexName,query:query,objectValues:objectValues,errorCallback:errorCallback};taskQueue.push(task)}},this.get={lastRecords:function(storeName,maxResults,callback,errorCallback){var task={type:"lastRecords",storeName:storeName,maxResults:maxResults,callback:callback,errorCallback:errorCallback};taskQueue.push(task)},records:function(storeName,indexName,query,callback,errorCallback){var task={type:"getRecords",storeName:storeName,indexName:indexName,query:query,callback:callback,errorCallback:errorCallback};taskQueue.push(task)}},this.utils={pageFromArray:function(array,elementsPerPage,page){var pageArray;return console.log(Array.isArray(array)),array.slice((page-1)*elementsPerPage,page*elementsPerPage)}},this.execTasks=function(){idle&&checkTasks()},this.isIndexedDBavailable=function(){var available=!0;return"indexedDB"in window||(console.log("This browser doesn't support IndexedDB"),available=!1),available},this.add.db(),this.execTasks()};